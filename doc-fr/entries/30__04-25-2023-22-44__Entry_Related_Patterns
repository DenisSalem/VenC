authors:
- 'Denis Salem'
categories:
- ''
title: Motifs de publications
chapter: 4.4.1
tree_test:
    - a:
        - b:
            - c
            - d
        - e:
            - f
    - g
---VENC-BEGIN-PREVIEW---
---VENC-END-PREVIEW---
Ces motifs permettent d'accéder à des métadonnées contenues dans une [publication](.:GetChapterAttributeByIndex::path::3.3:.). Ils ne
peuvent donc pas être utilisé en dehors d'une [publication](.:GetChapterAttributeByIndex::path::3.3:.) ou des fichiers ci-dessous composant
un thème :

- [entry.html](.:GetChapterAttributeByIndex::path::3.6:.)
- [atomEntry.html](.:GetChapterAttributeByIndex::path::3.6:.)
- [rssEntry.html](.:GetChapterAttributeByIndex::path::3.6:.)

#### ForEntryAuthors

> .:Escape:: .:ForEntryAuthors::string::separator:. :.

Retourne la liste des auteurs de la publication.

Le premier argument est une chaîne de caractères à formater avec la variable {value} contenant le nom de l'auteur courant.

Le second paramètre est une chaîne de caractères servant de séparateur.

#### ForEntryMetadata

> .:Escape:: .:ForEntryMetadata::metadata_name::string::separator:. :.

Il est possible de définir des métadonnées sous la forme de listes.

Le premier argument est une chaîne de caractères à formater avec la variable 
{value} contenant l'élément courant de la liste.

Le second paramètre est une chaîne de caractères servant de séparateur.

Si la métadonnée spécifié dans **metadata_name** n'existe pas VenC interompra la génération du site.

#### ForEntryMetadataIfExists

> .:Escape:: .:ForEntryMetadataIfExists::metadata_name::string::separator:. :.

Identique à [ForEntryMetadata](.:GetChapterAttributeByIndex::path::4.4.1:.#forentrymetadata) mais
est ignoré si la métadoné spécifié dans **metadata_name** n'existe pas.

#### GetEntryArchivePath

> .:Escape:: .:GetEntryArchivePath:. :.

Retourne le liens vers le groupe d'archives dans lequel se trouve la publication.

#### GetEntryCategoriesTree

> .:Escape:: .:GetEntryCategoriesTree::open_node::open_branch::close_branch::close_node:. :.

Les catégories de la publication sont organisées sous la forme d'un arbre.
Il est possible de récupérer l'arbre entier afin, typiquement, de générer un menu
ou une liste de catégories et de sous-catégories.

Les arguments du motif sont les suivants :

- **open_node** : contient la chaîne de caractères d'ouverture pour la catégorie parente.
- **open_branch** : contient la chaîne de caractères d'ouverture de la catégorie courante.
- **close_branch** : contient la chaîne de caractères de fermeture de la catégorie courante.
- **close_node** : contient la chaîne de caractères de fermeture de la catégorie parente.

Les variables de ce motif sont les suivantes :

- __value__ : le nom de la catégorie courante.
- __path__ : le chemin relatif de la catégorie courante.
- __count__ : le nombre de publications dans la catégorie courante.
- __weight__ : le nombre de publications dans la catégorie courante divisé par le nombre de publications appartenant à une categorie.
- __childs__ : Contient le résultat de la récursion suivante du motif.

Par exemple, pour créer un menu déroulant on peut utiliser le motif comme ci-dessous :

.:CodeHighlight::HTML::False::
.:Escape:: .:GetEntryCategoriesTree::
    <ul>::
    <li><a href="{path}" title="{count} publications">{value}</a>::
    {childs}</li>::
    </ul>
:. :.
:.

Si la publication était incluse dans les catégories suivantes :

.:CodeHighlight::YAML::False::
categories:
  - Material:
    - Metal:
      - Copper
      - Steel
  - Science
:.

Alors le motif générerait quelque chose comme le code HTML suivant :

.:CodeHighlight::HTML::False::
<ul>
    <li>
        <a href="../Material/" title="1 publications">Material</a>
        <ul>
            <li>
                <a href="../Material/Metal/" title="1 publications">Metal</a>
                <ul>
                    <li><a href="../Material/Metal/Copper/" title="1 publications">Copper</a></li>
                    <li><a href="../Material-Metal/Steel/" title="1 publications">Steel</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li>
        <a href="../Science/" title="1 publications">Science</a>
    </li>
</ul>
:.

À la fin de chaque branche, si la catégorie courante possède une ou plusieurs
catégories filles, alors les arguments *open&#95;node* et *close&#95;node* sont ajoutés et
une nouvelle liste de sous-catégories est générée entre ces deux arguments,
en utilisant les arguments *open_branch* et *close_branch*.

Ce motif est ignoré et supprimé si la génération des catégories est désactivé dans le fichier de [configuration principal](.:GetChapterAttributeByIndex::path::3.2:.#disable-categories).
#### GetEntryChapterLevel

> .:Escape:: .:GetEntryChapterLevel:. :.

Renvoie le niveau du chapitre de la publication.

Par exemple si la publication correspond au chapitre 1.2.3

.:CodeHighlight::YAML::False::
chapter: 1.2.3
:.

alors le motif renverrait _3_.

Si la publication correspond au chapitre 4.5

.:CodeHighlight::YAML::False::
chapter: 1.2.3
:.

alors le motif renverrait _2_.

#### GetEntryChapterPath

> .:Escape:: .:GetEntryChapterPath:. :.

Renvoie le chemin relatif du chapitre correspondant à la publication courante.

#### GetEntryDate

> .:Escape:: .:GetEntryDate[::format]:. :.

Retourne la date de la publication formatée comme définit dans le fichier de configuration par le champ *date&#95;format*.

Il est possible d'utiliser un autre format de date à l'aide de l'argument optionnel *format*.
Pour en savoir plus sur ce format, rendez vous [ici](https://strftime.org/).

#### GetEntryDay

> .:Escape:: .:GetEntryDay:. :.

Retourne le jour de création de la publication.

#### GetEntryHour

> .:Escape:: .:GetEntryHour:. :.

Retourne l'heure de création de la publication.

#### GetEntryID

> .:Escape:: .:GetEntryID:. :.

Retourne l'identifiant unique de la publication.

#### GetEntryMetadata

> .:Escape:: .:GetEntryMetadata::metadata_name:. :.

Il est possible de définir ses propres champs dans les métadonnées
d'une [publication](.:GetChapterAttributeByIndex::path::3.3:.) ou d'un [template](.:GetChapterAttributeByIndex::path::3.5:.).

Par exemple, si on définie le champ suivant :

.:CodeHighlight::YAML::False::
free_hardware : Arduino Mega
:.

Pour accéder à celui-ci, on utilisera le motif GetEntryMetadata de la façon suivante :

> .:Escape:: .:GetEntryMetadata::free_hardware:. :.

Si la métadonnée ainsi référencée n'existe pas,
VenC générera une erreur et stopera la génération du site.

#### GetEntryMetadataIfExists

> .:Escape:: .:GetEntryMetadataIfExists::metadata_name[::string][::string2]:. :.

De façon similaire, il est possible d'essayer d'accéder à une métadonnée,
sans garantie que celle-ci existe. Si la métadonnée existe, il est possible alors de formater du texte pour l'y inclure.

Les arguments de ce pattern sont au nombre de trois :

- **metadata_name** : le nom de la métadonnée désirée.
- **string** : le texte formaté retourné si la condition est remplie. Optionnel. Si cet argument n'est pas présent, la fonction renvoie la valeur de la métadonnée sans formatage.
- **string2** : le texte non formaté retourné si la condition n'est pas rempli. Si cet argument n'est pas présent, le pattern est ignoré.

Il est possible d'utiliser la variable suivante dans l'argument __string__ pour formater le texte :

- __value__ : contient la valeur de la métadonnée qu'on référence.

#### GetEntryMetadataIfNotNull

> .:Escape:: .:GetEntryMetadataIfNotNull::metadata_name[::string][::string2]:. :.

Identique à [GetEntryMetadataIfExists](.:GetChapterAttributeByIndex::path::4.4.1:.#getentrymetadatatreeifexists), mais la métadonnée spécifié ne doit pas être vide ou être _null_.

Par exemple: 

.:CodeHighlight::HTML::False::
.:Escape:: <div id="entry.:GetEntryID:." .:GetEntryMetadataIfExists::alternate_style::class="{value}":. >:.
:.

Si la métadonnée référencée n'est pas définie, est vide ou _null_, VenC retourne string2 si définit, sinon le motif est ignoré.

Si le second argument n'est pas définie l'accesseur renvoie directement la variable référencée, si le test réussie.

#### GetEntryMetadataTree

.:CodeHighlight::Text::False:: .:Escape::
.:GetEntryMetadataTree::
    metadata_name::
    open_node::
    open_branch::
    value_childs::
    value::
    close_branch::
    close_node
:. :.
:.

Ce pattern permet de formatter sous la forme d'un arbre une metadonnée de publication qui serait une structure de donnée.

Les arguments de ce motif sont les suivants :

- **metadata_name** : Le nom de la métadonnée auquel on souhaite accéder. Si elle n'existe pas, VenC lève une exception.
- **open_node** : La chaine de caractère ouvrant la liste courante.
- **open_branch** : La chaine de caractère ouvrant l'item courant.
- **value_childs** : La chaine de caractère composant l'item courant si celui-ci a des items enfants.
- **value** : La chaine de caractère composant l'item courant si celui-ci n'a pas d'items enfants.
- **close_branch** : La chaine de caractère fermant l'item courant.
- **clode_node** : La chaine de caractère fermant la liste courante.

Ce motif possède les variables suivantes :

- __value__ : Contient la valeur de l'item courant. Vous pouvez utiliser cette variable dans les arguments _value_ et *value_childs*.
- __childs__ : Contient le bloc enfant de l'item courant. Vous ne pouvez utiliser cette variable que dans l'argument *value_childs*.

Un exemple d'utilisation de ce pattern ci-dessous. Étant donnée la métadonnée de publication suivante :

.:CodeHighlight::YAML::False::
tree_test:
    - a:
        - b:
            - c
            - d
        - e:
            - f
    - g:.

Si l'on veut afficher *tree_test* sous la forme de listes imbriquées on pourrait utiliser le motif comme suit :

.:CodeHighlight::HTML::False:: .:Escape::
 .:GetEntryMetadataTree::
    tree_test::
    <ul>::
    <li>::
    {value} {childs}::
    {value}::
    </li>::
    </ul>
:. :.
:.

Ce qui donnerait :

.:GetEntryMetadataTree::tree_test::<ul>::<li>::{value} {childs}::{value}::</li>::</ul>:.


#### GetEntryMetadataTreeIfExists

.:CodeHighlight::Text::False:: .:Escape:: .:GetEntryMetadataTreeIfExists::
    metadata_name::
    open_node::
    open_branch::
    value_childs::
    value::
    close_branch::
    close_node
:. :.
:.

Identique à [GetEntryMetadataTree](.:GetChapterAttributeByIndex::path::4.4.1:.#getentrymetadatatree) mais le pattern
est ignoré si la métadonnée indiqué n'existe pas.

#### GetEntryMinute

> .:Escape:: .:GetEntryMinute:. :.

Retourne la minute de création de la publication.

#### GetEntryMonth

> .:Escape:: .:GetEntryMonth:. :.

Retourne le mois de création de la publication.

#### GetEntryPath

> .:Escape:: .:GetEntryPath:. :.

Retourne le chemin relatif de la publication
si VenC est configuré pour générer une page par publication.
Sinon, le motif est ignoré et supprimé.

#### GetEntryTitle

> .:Escape:: .:GetEntryTitle:. :.

Retourne le titre de la publication.

#### GetEntryToC

> .:Escape:: .:GetEntryToC::open_ul::open_li::content::close_li::close_ul:. :.

Ce motif permet de générer une table des matières multi-niveau sur la base des titres présent
dans __le corps__ d'une publication [MarkDown](https://daringfireball.net/projects/markdown/syntax#header).

- **open_ul** : La chaine de caractère ouvrant le niveau courant.
- **open_li** : La chaine de caractère ouvrant l'item courant.
- **content** : La chaine de caractère composant l'item courant où vous pouvez utiliser les variables du motif.
- **close_li** : La chaine de caractère fermant l'item courant.
- **clode_ul** : La chaine de caractère fermant le niveau courant.

Le motif a quelque variables qu'il est possible d'utiliser dans l'argument *content*.

- __id__ : Contient l'id html de l'entête correspondant à l'item courant.
- __title__ : Contient le titre de l'entête correspondant à l'item courant.
- __level__ : Contient le niveau de l'entête correspondant à l'item courant.

Un usage classique ressemblerait à quelque chose comme :

.:CodeHighlight::Text::False:: .:Escape::
.:GetEntryToC::
    <ul>::
    <li>::
    <a href="#{id}" class="toc_level_{level}">{title}</a>::
    </li>::
    </ul>
:.
:. :.


Si dans la publication on trouvait les titres suivant :

.:CodeHighlight::Text::False::
# Title 1

## Title 1.1

### Title 1.1.1

## title 1.2:.

alors le précédent exemple générerait le code html suivant :

.:CodeHighlight::HTML::False::<ul>
    <li>
        <a href="#title-1" class="toc_level_1">Title 1</a>
        <ul>
            <li>
                <a href="#title-1-1" class="toc_level_2">Title 1.1</a>
                <ul>
                    <li>
                        <a href="#title-1-1-1" class="toc_level_3">Title 1.1.1</a>
                    </li>
                </ul>
            </li>
            <li>
                <a href="#title-1-2" class="toc_level_2">title 1.2</a>
            </li>
        </ul>
    </li>
</ul>:.

Ce qui donne : 

.:HTML::<ul>
    <li>
        <a href="#title-1" class="toc_level_1">Title 1</a>
        <ul>
            <li>
                <a href="#title-1-1" class="toc_level_2">Title 1.1</a>
                <ul>
                    <li>
                        <a href="#title-1-1-1" class="toc_level_3">Title 1.1.1</a>
                    </li>
                </ul>
            </li>
            <li>
                <a href="#title-1-2" class="toc_level_2">title 1.2</a>
            </li>
        </ul>
    </li>
</ul>:.

Quelques remarques :

- Pour une meilleurs intégration avec [MarkDown](https://daringfireball.net/projects/markdown/) le motif peut rajouter des balises &lt;/p&gt; et &lt;p&gt;, respectivement au début et à la fin du texte de sortie.
- Le motif ne test pas la cohérence des niveaux des entêtes, une hierarchie invalide peut donc produire une sortie incorrect.
- Vous pouvez utiliser ce motif depuis votre thème dans __entry.html__ ou bien directement dans votre publication.

#### GetEntryYear

> .:Escape:: .:GetEntryYear:. :.

Retourne l'année de création de la publication.

#### GetFlattenedEntryCategories

> .:Escape:: .:GetFlattenedEntryCategories::string::separator:. :.

Permet de récupérer sous la forme d'une liste chaque item de l'arbre des catégories d'une publication.

Si la génération des fils de publication trié par categorie est désactivé, ce motif est ignoré.

Les argument de ce motif sont :

- __string__ : La chaine de caractère correspondant à l'item courant.
- __separator__ : La chaine de caractère qui sert de séparateur entre chaque item.

Dans l'argument _string_ vous pouvez utiliser les variables suivantes :

- __value__ : Le nom de la categorie courante.
- __count__ : Le nombre de publication dans cette categorie.
- __weight__ : Le nombre de publication dans cette categorie divisé par le nombre de publication ayant une categorie.
- __path__ : Le chemin relatif menant au fil de publication de la categorie courante.


#### IfEntryMetadataIsTrue

> .:Escape:: .:IfEntryMetadataIsTrue::metadata_name::if_true[::if_false]:. :.

Permet d'afficher un text ou un autre selon que la métadonnée indiqué est vrai ou fausse.

Ce motif possède les arguments suivant :

- **metadata_name** : Le nom de la métadonnée qu'on test. Le test de vérité est *pythonic*. C'est à dire que pour échouer la métadonnée ne doit pas exister ou être explicitement un booléen "false".
- **if_true** : Le texte à retourner si le test réussie.
- **if_false** : Optionnel. Le texte à retourner si le test échoue.

