authors:
- 'Denis Salem'
categories:
- ''
title: Motifs divers
chapter: 4.4.3
---VENC-BEGIN-PREVIEW---
---VENC-END-PREVIEW---
Ces motifs n'ont pas vocation à récupérer ou mettre en
forme des informations propre à votre projet. Il s'agit plutôt de fonctionnalités
avancés pour de la mise en page spécifique ou l'utilisation d'API ou fonctionalité
tierce. Par exemple pour la coloration syntaxique ou pour incorporer du contenu embarqué.

Comme pour les motifs de blog, ceux là sont sans état et sont exécutés
une et une seule fois au moment au VenC lit ceux là.

#### Audio

> .:Escape:: .:Audio::source::extensions:. :.

Ce motif permet d'inclure un fichier vidéo dans la page. Pour ce faire, le fichier [audio.html](.:GetChapterAttributeByIndex::path::3.6:.)
faisant partie du thème est formaté avec les paramètres passés au motif :

- __source__ : Il s'agit de l'URL ou du chemin du fichier audio. Il peut s'agir d'un chemin absolu ou 
relatif. S'il s'agit d'un chemin relatif, vous pouvez utiliser le motif
[GetRelativeRoot](.:GetChapterAttributeByIndex::path::4.3:.#getrelativeroot).
Attention, l'URL ou le chemin passé en paramètre ne doit pas contenir l'extension du fichier.
- __extensions__ : Pour assurer la compatibilité de votre contenu avec
les différents navigateurs du marché, il est recommandé d'avoir plusieurs
sources du même fichier audio en différents formats. Ce paramètre est donc
une liste des extensions disponibles. Les éléments de la liste sont séparés par une virgule.

##### Exemple de fichier audio.html

.:CodeHighlight::HTML::False::
<audio controls style="width: 100%">
{source}
Your browser does not support the audio element.
</audio>:.

Ce qui est important ici, c'est la [variable python](https://docs.python.org/fr/3/tutorial/inputoutput.html#the-string-format-method) _source_ que VenC remplace par autant
d'occurence que nécessaire par des balises _source_ contenant la version du fichier courant.

##### Exemple d'utilisation

> .:Escape:: .:Audio::http://www.nyan.cat/music/original::mp3,ogg:. :.

On voit ici que le fichier audio est disponible en deux formats :

- mp3
- ogg

Il y a donc deux fichiers :

- original.mp3
- original.ogg

Se trouvant à l'adresse :

http://www.nyan.cat/music/

Finalement on obtient le résultat suivant :

.:CodeHighlight::HTML::False::<audio controls style="width: 100%">
    <source src="http://www.nyan.cat/music/original.mp3" type="audio/mp3">
    <source src="http://www.nyan.cat/music/original.ogg" type="audio/ogg">
    Your browser does not support the audio element.
</audio>:.

.:Audio::http://www.nyan.cat/music/original::mp3,ogg:.

#### CodeHighlight

> .:Escape:: .:CodeHightlight::language::line_numbers::input_code:. :.

VenC permet de formater du code source pour qu'il soit plus lisible et
agréable à lire dans vos articles. Cette fonctionnalité dépend de la
librairie tierce [Pygments](https://pygments.org/).

Ce motif prend trois arguments :

- __language__ : Indique le langage du texte d'entrée. La liste des langages
supportés par Pygments est disponible [ici](https://pygments.org/languages/).
Si vous ne souhaitez pas coloriser le texte d'entrée, utilisez la valeur "Text".
- __line_numbers__ : Il s'agit d'un booléen indiquant à VenC si vous
souhaitez générer le numéro des lignes dans le rendu.
- __input_code__ : Le code source que vous souhaitez formater.

Par exemple, l'utilisation ci-dessous du motif :

.:CodeHighlight::Text::False:: .:Escape::
.:CodeHighlight::C::False::
#include <stdio.h>

int main(int argc, char ** argv) {
    printf("Hello VenC user!\n");
    return 0;
}:. :.
:.

Générerait le code HTML suivant :

.:CodeHighlight::HTML::False::
<div class="__VENC_PYGMENTIZE_WRAPPER__">
    <div class="venc_source_C">
        <pre>
            <span></span>
            <span class="cp">#include</span>
            <span class="cpf">&lt;stdio.h&gt;</span>
            <span class="cp"></span>
            <span class="kt">int</span>
            <span class="nf">main</span>
            <span class="p">(</span>
            <span class="kt">int</span>
            <span class="n">argc</span>
            <span class="p">,</span>
            <span class="kt">char</span>
            <span class="o">**</span>
            <span class="n">argv</span>
            <span class="p">)</span> 
            <span class="p">{</span>
            <span class="n">printf</span>
            <span class="p">(</span>
            <span class="s">&quot;Hello VenC user!</span>
            <span class="se">\n</span>
            <span class="s">&quot;</span>
            <span class="p">);</span>
            <span class="k">return</span>
            <span class="mi">0</span>
            <span class="p">;</span>
            <span class="p">}</span>
        </pre>
    </div>
</div>:.

Qui rend ensuite à l'écran comme ça :

.:CodeHighlight::C::False::
#include <stdio.h>

int main(int argc, char ** argv) {
    printf("Hello VenC user!\n");
    return 0;
}:.

Le style CSS du code source ainsi formaté est généré automatiquement
par VenC dans un fichier et est placé dans le répertoire "extra" de
votre projet. Ces fichiers doivent être explicitement inclus dans votre
page à l'aide du motif [GetStyleSheets](.:GetChapterAttributeByIndex::path::4.3:.#getstylesheets).

Dans l'exemple précédent, le fichier CSS créé serait le suivant :

> venc_source_C.css

Pour adapter le style du formatage à votre mise en page, vous pouvez
définir un style appliqué aux éléments enfants de la balise :

.:CodeHighlight::HTML::False::<div class="__VENC_PYGMENTIZE_WRAPPER__"></div>:.

Par exemple pour la documentation que vous êtes en train de lire,
le style CSS suivant est appliqué :

.:CodeHighlight::CSS::False::blockquote, pre
    {background-color: #202020;
    margin: 0px;
    border-radius: 3px;
    padding: 3px;
    padding-left: 10px;
    padding-right: 10px;
    color: #808080;
    overflow-x: scroll;}:.

Il est important que le style ainsi définit soit inclut dans header.html
APRÈS utilisation du motifs
[GetStyleSheets](.:GetChapterAttributeByIndex::path::4.3:.#getstylesheets).

#### CodeHighlightInclude

> .:Escape:: .:CodeHightlightInclude::language::line_numbers::input_code_file:. :.

Ce motif fonctionne exactement comme le précédent motif [CodeHighlight](.:GetChapterAttributeByIndex::path::4.4.3:.#codehighlight),
à la différence que le dernier argument ne contient pas de code source
mais le nom de fichier dans lequel se trouve celui-ci. Ce fichier source
doit être placé dans le répertoire includes de votre projet.

Ce motif est donc à préférer au précédent quand le code source est très
long, et que vous ne souhaitez pas "polluer" votre publication avec du
code.

Notons que tout ce qui se trouve à l'intérieur du fichier ainsi inclu
n'est pas traité par le moteur de motifs de VenC.

#### DisableMarkup

> .:Escape:: .:DisableMarkup::content:. :.

Ce motif permet d'empécher l'interpréteur de langage de balisage de traiter
le texte passé en paramètre. Attention cependant, VenC y reconnaît toujours ses propres motifs.

Ce motif ne prend qu'un seul paramètre.

- __content__ : Le texte pour lequel on veut désactiver l'interpréteur de langage de balisage.

#### Escape

> .:Escape:: .:Escape::content:. :.

Identique à [DisableMarkup](.:GetChapterAttributeByIndex::path::4.4.3:.#disablemarkup)
mais permet d'ignorer également les motifs contenus à l'intérieur du texte de
l'unique argument content.
