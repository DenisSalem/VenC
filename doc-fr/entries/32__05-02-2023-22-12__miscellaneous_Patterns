authors:
- 'Denis Salem'
categories:
- ''
title: Motifs divers
chapter: 4.4.3
---VENC-BEGIN-PREVIEW---
---VENC-END-PREVIEW---
Ces motifs n'ont pas vocation à récupérer ou mettre en
forme des informations propre à votre projet. Il s'agit plutôt de fonctionnalités
avancés pour de la mise en page spécifique ou l'utilisation d'API ou fonctionalité
tierce. Par exemple pour la coloration syntaxique ou pour incorporer du contenu embarqué.

Comme pour les motifs de blog, ceux là sont sans état et sont exécutés
une et une seule fois au moment au VenC lit ceux là.

#### Audio

> .:Escape:: .:Audio::source::extensions:. :.

Ce motif permet d'inclure un fichier vidéo dans la page. Pour ce faire, le fichier [audio.html](.:GetChapterAttributeByIndex::path::3.6:.)
faisant partie du thème est formaté avec les paramètres passés au motif :

- __source__ : Il s'agit de l'URL ou du chemin du fichier audio. Il peut s'agir d'un chemin absolu ou 
relatif. S'il s'agit d'un chemin relatif, vous pouvez utiliser le motif
[GetRelativeRoot](.:GetChapterAttributeByIndex::path::4.3:.#getrelativeroot).
Attention, l'URL ou le chemin passé en paramètre ne doit pas contenir l'extension du fichier.
- __extensions__ : Pour assurer la compatibilité de votre contenu avec
les différents navigateurs du marché, il est recommandé d'avoir plusieurs
sources du même fichier audio en différents formats. Ce paramètre est donc
une liste des extensions disponibles. Les éléments de la liste sont séparés par une virgule.

##### Exemple de fichier audio.html

.:CodeHighlight::HTML::False::
<audio controls style="width: 100%">
{source}
Your browser does not support the audio element.
</audio>:.

Ce qui est important ici, c'est la [variable python](https://docs.python.org/fr/3/tutorial/inputoutput.html#the-string-format-method) _source_ que VenC remplace par autant
d'occurence que nécessaire par des balises _source_ contenant la version du fichier courant.

##### Exemple d'utilisation

> .:Escape:: .:Audio::http://www.nyan.cat/music/original::mp3,ogg:. :.

On voit ici que le fichier audio est disponible en deux formats :

- mp3
- ogg

Il y a donc deux fichiers :

- original.mp3
- original.ogg

Se trouvant à l'adresse :

http://www.nyan.cat/music/

Finalement on obtient le résultat suivant :

.:CodeHighlight::HTML::False::<audio controls style="width: 100%">
    <source src="http://www.nyan.cat/music/original.mp3" type="audio/mp3">
    <source src="http://www.nyan.cat/music/original.ogg" type="audio/ogg">
    Your browser does not support the audio element.
</audio>:.

.:Audio::http://www.nyan.cat/music/original::mp3,ogg:.

#### CodeHighlight

> .:Escape:: .:CodeHightlight::language::line_numbers::input_code:. :.

VenC permet de formater du code source pour qu'il soit plus lisible et
agréable à lire dans vos articles. Cette fonctionnalité dépend de la
librairie tierce [Pygments](https://pygments.org/).

Ce motif prend trois arguments :

- __language__ : Indique le langage du texte d'entrée. La liste des langages
supportés par Pygments est disponible [ici](https://pygments.org/languages/).
Si vous ne souhaitez pas coloriser le texte d'entrée, utilisez la valeur "Text".
- __line_numbers__ : Il s'agit d'un booléen indiquant à VenC si vous
souhaitez générer le numéro des lignes dans le rendu.
- __input_code__ : Le code source que vous souhaitez formater.

Par exemple, l'utilisation ci-dessous du motif :

.:CodeHighlight::Text::False:: .:Escape::
.:CodeHighlight::C::False::
#include <stdio.h>

int main(int argc, char ** argv) {
    printf("Hello VenC user!\n");
    return 0;
}:. :.
:.

Générerait le code HTML suivant :

.:CodeHighlight::HTML::False::
<div class="__VENC_PYGMENTIZE_WRAPPER__">
    <div class="venc_source_C">
        <pre>
            <span></span>
            <span class="cp">#include</span>
            <span class="cpf">&lt;stdio.h&gt;</span>
            <span class="cp"></span>
            <span class="kt">int</span>
            <span class="nf">main</span>
            <span class="p">(</span>
            <span class="kt">int</span>
            <span class="n">argc</span>
            <span class="p">,</span>
            <span class="kt">char</span>
            <span class="o">**</span>
            <span class="n">argv</span>
            <span class="p">)</span> 
            <span class="p">{</span>
            <span class="n">printf</span>
            <span class="p">(</span>
            <span class="s">&quot;Hello VenC user!</span>
            <span class="se">\n</span>
            <span class="s">&quot;</span>
            <span class="p">);</span>
            <span class="k">return</span>
            <span class="mi">0</span>
            <span class="p">;</span>
            <span class="p">}</span>
        </pre>
    </div>
</div>:.

Qui rend ensuite à l'écran comme ça :

.:CodeHighlight::C::False::
#include <stdio.h>

int main(int argc, char ** argv) {
    printf("Hello VenC user!\n");
    return 0;
}:.

Le style CSS du code source ainsi formaté est généré automatiquement
par VenC dans un fichier et est placé dans le répertoire "extra" de
votre projet. Ces fichiers doivent être explicitement inclus dans votre
page à l'aide du motif [GetStyleSheets](.:GetChapterAttributeByIndex::path::4.3:.#getstylesheets).

Dans l'exemple précédent, le fichier CSS créé serait le suivant :

> venc_source_C.css

Pour adapter le style du formatage à votre mise en page, vous pouvez
définir un style appliqué aux éléments enfants de la balise :

.:CodeHighlight::HTML::False::<div class="__VENC_PYGMENTIZE_WRAPPER__"></div>:.

Par exemple pour la documentation que vous êtes en train de lire,
le style CSS suivant est appliqué :

.:CodeHighlight::CSS::False::blockquote, pre
    {background-color: #202020;
    margin: 0px;
    border-radius: 3px;
    padding: 3px;
    padding-left: 10px;
    padding-right: 10px;
    color: #808080;
    overflow-x: scroll;}:.

Il est important que le style ainsi définit soit inclut dans header.html
APRÈS utilisation du motifs
[GetStyleSheets](.:GetChapterAttributeByIndex::path::4.3:.#getstylesheets).

#### CodeHighlightInclude

> .:Escape:: .:CodeHightlightInclude::language::line_numbers::input_code_file:. :.

Ce motif fonctionne exactement comme le précédent motif [CodeHighlight](.:GetChapterAttributeByIndex::path::4.4.3:.#codehighlight),
à la différence que le dernier argument ne contient pas de code source
mais le nom de fichier dans lequel se trouve celui-ci. Ce fichier source
doit être placé dans le répertoire includes de votre projet.

Ce motif est donc à préférer au précédent quand le code source est très
long, et que vous ne souhaitez pas "polluer" votre publication avec du
code.

Notons que tout ce qui se trouve à l'intérieur du fichier ainsi inclu
n'est pas traité par le moteur de motifs de VenC.

#### DisableMarkup

> .:Escape:: .:DisableMarkup::content:. :.

Ce motif permet d'empécher l'interpréteur de langage de balisage de traiter
le texte passé en paramètre. Attention cependant, VenC y reconnaît toujours ses propres motifs.

Ce motif ne prend qu'un seul paramètre.

- __content__ : Le texte pour lequel on veut désactiver l'interpréteur de langage de balisage.

#### Escape

> .:Escape:: .:Escape::content:. :.

Identique à [DisableMarkup](.:GetChapterAttributeByIndex::path::4.4.3:.#disablemarkup)
mais permet d'ignorer également les motifs contenus à l'intérieur du texte de
l'unique argument content.

#### GetEmbedContent

> .:Escape:: .:GetEmbedContent::content_URL:. :.

Ce motif permet de récupérer du contenu embarqué via le protocole oEmbed.
Typiquement, cela vous permet d'importer un lecteur Youtube ou SoundCloud
dans votre publication.

Le seul argument de ce motif est :

- **content_URL** : il s'agit de l'URL de la ressource embarquée que vous voulez inclure.

Par exemple, l'utilisation du motif comme ci-dessous :

> .:Escape:: .:GetEmbedContent::https://www.youtube.com/watch?v=y8Kyi0WNg40:. :.

Produit le code suivant :

.:CodeHighlight::HTML::False::<iframe
    src="https://www.youtube.com/embed/y8Kyi0WNg40?feature=oembed"
    allow="
        accelerometer;
        autoplay;
        clipboard-write;
        encrypted-media;
        gyroscope;
        picture-in-picture;
        web-share
    " 
    allowfullscreen=""
    title="Dramatic Look"
    width="427"
    height="320" 
    frameborder="0"
>
</iframe>:.

Le résultat étant :

.:GetEmbedContent::https://www.youtube.com/watch?v=y8Kyi0WNg40:.

Pour fonctionner ce motif utilise une liste de providers disponibles
[ici](https://oembed.com/providers.json) et inclus avec VenC.

L'utilisation de ce motif génère des données misent en cache dans le
répertoire de votre projet.

#### GetVenCVersion

> .:Escape:: .:GetVenCVersion:. :.

Ce motif retourne la version de VenC avec laquelle la page courante est
générée.

#### IncludeFile

> .:Escape:: .:IncludeFile::filename[::arg1][::arg2][...]:. :.

Ce motif permet d'inclure le contenu d'un fichier dans la publication courante.
Celui-ci ne doit comporter que des caractères imprimables.

Ce motif prend au minimum deux arguments :

- __filename__ : Le chemin du fichier à inclure dans la page. Celui-ci doit se trouver dans le répertoire includes de votre projet. Si le fichier n'existe pas ou n'est pas accessible, VenC lève une exception.
- __arg1, arg2, ...__ : Ces paramètres sont optionnels. Il vous permettent de formater l'intérieur du fichier à inclure en remplaçant des variables numérotés (venc_arg_1, venc_arg_2, venc_arg_n) qui s'y trouverait par la valeur de chacun des paramètres correspondant.

##### Un premier exemple

Avec un fichier contenant plein de trucs longs et compliqués que nous appellerons :

> plein-de-truc-longs-et-compliqués.txt

Et qui se trouverait dans le répertoire includes de votre projet.
Nous utiliserions alors le motif comme suit :

> .:Escape:: .:IncludeFile::plein-de-truc-longs-et-compliqués.txt:. :.

Notons que tout ce qui se trouve à l'intérieur du fichier ainsi inclus
n'est pas traité par les interpréteurs de langage balisé.

##### Second exemple

Nous utiliserons les paramètres optionnels pour formater le contenu du
fichier à inclure.

Soit le fichier :

> liste_de_choses_à_faire.txt

Qui contiendrait :

.:CodeHighlight::TEXT::False::Voilà les choses qu'il faut que je fasse avant de mourrir
 - {venc_arg_1}
 - {venc_arg_2}
 - {venc_arg_3}
 - {venc_arg_4}:.

En utilisant le motif IncludeFile comme suit :

.:CodeHighlight::TEXT::False:: .:Escape:: .:IncludeFile::liste_de_choses_à_faire.txt::
Libérer la Corée du Nord::
Terraformer la lune::
Découvrir la matière exotique et commercialiser les trous de ver pour le voyage interstellaire::
Nourrir Tacos, mon chien.
:. :.
:.

Nous obtiendrions :

.:CodeHighlight::Text::False::Voilà les choses qu'il faut que je fasse avant de mourrir
 - Libérer la Corée du Nord
 - Terraformer la lune
 - Découvrir la matière exotique et commercialiser les trous de ver pour le voyage interstellaire
 - Nourrir Tacos, mon chien:.

La portion de texte ci-dessus serait incluse telle quelle dans la
page générée par VenC.

#### IncludeFileIfExists

> .:Escape:: .:IncludeFileIfExists::filename[::arg1][::arg2][...]:. :.

Identique à [IncludeFile](.:GetChapterAttributeByIndex::path::4.4.3:.#includefile) mais le motif
est ignoré si le fichier à inclure est inaccessible ou n'existe pas.

#### Kroki

> .:Escape:: .:Kroki::endpoint::format::code[::provider]:. :.

[Kroki](https://kroki.io/) est une API en ligne permettant de générer des diagrammes depuis une description textuelle. VenC permet
d'utiliser cette API nativement mais nécessite tout de même que la librairie python [requests](https://fr.python-requests.org/en/latest/) soit installé.

Les arguments sont les suivants :

- __endpoint__ : Le nom du type de diagramme que vous souhaitez générer. Vous pouvez consulter la liste de ces types de diagramme [ici](https://kroki.io/#support)
- __format__ : Le format de l'image retourné par le serveur :
  - __png__
  - __svg__
- __code__ : La description textuelle du Diagramm que vous voulez générer.
- __provider__ : Il s'agit du serveur depuis lequel l'API est utilisé. Par défaut il s'agit de [https://kroki.io](https://kroki.io/).

VenC récupère l'image est l'enregistre dans le répertoire [extra](.:GetChapterAttributeByIndex::path::3.1:.). Celle-ci est ensuite copié à la racine du blog.
Le motif renvoie quand à lui un balise _img_ de la forme :

.:CodeHighlight::HTML::False::<img class="__VENC_KROKI__" src="../kroki_2b7b50208100ca9a40a3138ee72e62f7.svg">:.

##### Exemple basé sur celui proposé sur le site du projet

On se propose de générer un diagramme UML avec PlantUML au format png :

.:CodeHighlight::TEXT::False:: .:Escape::
.:Kroki::
  plantuml::
  svg::
  skinparam ranksep 20
  skinparam dpi 125
  skinparam packageTitleAlignment left
  
  rectangle "Main" {
    (main.view)
    (singleton)
  }
  rectangle "Base" {
    (base.component)
    (component)
    (model)
  }
  rectangle "<b>main.ts</b>" as main_ts
  
  (component) ..> (base.component)
  main_ts ==> (main.view)
  (main.view) --> (component)
  (main.view) ...> (singleton)
  (singleton) ---> (model)
:. :. :.

Ce qui donnerait :

.:Kroki::
  plantuml::
  svg::
  skinparam ranksep 20
  skinparam dpi 125
  skinparam packageTitleAlignment left
  
  rectangle "Main" {
    (main.view)
    (singleton)
  }
  rectangle "Base" {
    (base.component)
    (component)
    (model)
  }
  rectangle "<b>main.ts</b>" as main_ts
  
  (component) ..> (base.component)
  main_ts ==> (main.view)
  (main.view) --> (component)
  (main.view) ...> (singleton)
  (singleton) ---> (model)
:.

#### KrokiFromFile

> .:Escape:: .:Kroki::endpoint::format::filename[::provider]:. :.

Identique à [Kroki](.:GetChapterAttributeByIndex::path::4.4.3:.#kroki) mais l'argument _code_ est remplacé par _filename_.
Il s'agit du nom de fichier contenant le code décrivant le diagramme. Si le fichier n'existe pas ou n'est pas accessible,
VenC s'arrête sur une erreur.

#### Latex2MathML

> .:Escape:: .:Latex2MathML::latex_code:. :.

Ce motif vous permet de générer du code MathML converti depuis le très
populaire langage LaTeX. Ainsi, vous pouvez facilement inclure dans votre
publication des formules mathématiques.

Cette fonctionnalité dépend d'une librairie tierce, indépendante de VenC.
En cas de problème ou de difficulté vous pourriez vouloir signaler un bug
sur la page du projet latex2mathml.

Le seul argument du motif est :

- __latex_code__ : le code source LaTeX de la formule que vous souhaitez intégrer.

Par exemple :

> .:Escape:: .:Latex2MathML::\overline{z^{n+1}} = {\overline{z}}^{n+1}:. :.

Produirait le code suivant :

.:CodeHighlight::HTML::False::<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML">
    <mrow>
        <mover>
            <mrow>
                <msup>
                    <mi>z</mi>
                    <mrow>
                        <mi>n</mi>
                        <mo>&#x0002B;</mo>
                        <mn>1</mn>
                    </mrow>
                </msup>
            </mrow>
            <mo stretchy="true">&#x000AF;</mo>
        </mover>
        <mo>&#x0003D;</mo>
        <msup>
            <mrow>
                <mover>
                    <mrow>
                        <mi>z</mi>
                    </mrow>
                    <mo stretchy="true">&#x000AF;</mo>
                </mover>
            </mrow>
            <mrow>
                <mi>n</mi>
                <mo>&#x0002B;</mo>
                <mn>1</mn>
            </mrow>
        </msup>
    </mrow>
</math>:.

Le résultat étant :

.:Latex2MathML::\overline{z^{n+1}} = {\overline{z}}^{n+1}:.

#### SetColor

> .:Escape:: .:SetColor::color::input_text:. :.

Ce motif permet de formater du texte avec la couleur de son choix et prend deux arguments :

- __input_text__ : Le texte à formater. Peut contenir d'autres motifs.
- __color__ : La couleur désirée telle que spécifiée par [CSS](https://developer.mozilla.org/fr/docs/Web/CSS/color_value).

Par exemple

> .:Escape:: .:SetColor::red::Texte de couleur rouge:. :.

Produira le code HTML suivant :

.:CodeHighlight::HTML::False::<span class="__VENC_TEXT_COLOR__" style="color: red;">Texte de couleur rouge</span>:.

On remarque que la balise <span> a pour class __VENC_TEXT_COLOR__ ce qui
permet plus de contrôle lors de la mise en page de votre blog.

#### SetStyle

> .:Escape:: .:SetStyle::tag_id::tag_class::content:. :.

Ce motif permet d'assigner un id et une class CSS à une paire de balises
span ajoutée par VenC pour encapsuler le texte passé en paramètre.

Ce motif prend donc trois paramètres :

- __tag_id__ : Le nom de l'id CSS à assigner au texte.
- __tag_class__ : Le nom de la classe CSS à assigner au texte.
- __content__ : Le texte auquel vous souhaitez appliquer un style CSS.

Par exemple :

> .:Escape:: .:SetStyle::mon_id::ma_class::Un texte quelconque à formater. :. :.

Produirait :

.:CodeHighlight::HTML::False::<span id="ma_class" class="ma_class">Un texte quelconque à formater.</span>:.

#### Table

> .:Escape:: .:Table[::item1][::item2] ... :. :.

Ce motif permet d'organiser du contenu dans un tableau. Le motif a un nombre illimité d'arguments. Chaque argument correspond au contenu d'une cellule.

Quand VenC détect qu'un argument est égal à la valeur _NewLine_, une nouvelle ligne est insérée,
puis VenC poursuit l'ajout des cellules du tableau pour chaque argument.

Par exemple, pour créer un tableau de quatre cellules et deux lignes :

.:CodeHighlight::TEXT::False:: .:Escape::
.:Table:: VenC version: :: .:GetVenCVersion:.                   ::
NewLine:: Date          :: .:GetGenerationTimestamp::%d-%m-%Y:. :.
:. :.

Ce qui produira le code suivant :

.:CodeHighlight::HTML::False::<div class="__VENC_TABLE__">
    <table>
        <tr>
            <td>VenC version:</td>
            <td>2.0.0</td>
        </tr>
        <tr>
            <td>Date</td>
            <td>11-06-2020</td>
        </tr>
    </table>
</div>:.

Comme on le voit, il est possible d'utiliser des motifs VenC à l'intérieur du motif Table.
Remarquons également que pour chaque cellule, les caractères blancs au début et à la fin de l'argument correspondant sont effacés.

#### Video

> .:Escape:: .:Video::source::extensions[::poster]:. :.

Ce motif fonctionne comme [Audio](.:GetChapterAttributeByIndex::path::4.4.3:.#audio), il possède cependant un argument supplémentaire
pour ajouter une vignette.

Ce motif permet donc d'inclure un fichier vidéo dans la page. Pour ce faire, le fichier [video.html](.:GetChapterAttributeByIndex::path::3.6:.)
faisant partie du thème est formaté avec les paramètres passés au motif :

- __source__ : Il s'agit de l'URL ou du chemin de la vidéo. Il peut s'agir d'un chemin absolu ou relatif. S'il s'agit d'un chemin relatif, vous pouvez utiliser [GetRelativeRoot](.:GetChapterAttributeByIndex::path::4.3:.#getrelativeroot). Attention, l'URL ou le chemin passé en paramètre ne doit pas contenir l'extension du fichier.
- __extensions__ : Pour assurer la compatibilité de votre contenu avec les différents navigateurs du marché, il est recommandé d'avoir plusieurs sources de la même vidéo en différents formats. Ce paramètre est donc une liste des extensions disponibles pour votre vidéo. Les éléments de la liste sont séparés par une virgule.
- __poster__ : Il est possible d'avoir une image de fond, en remplacement de la vidéo quand celle-ci n'est pas encore lancée. Ce paramètre contient donc l'URL ou le chemin relatif (vous pouvez également utiliser [GetRelativeRoot](.:GetChapterAttributeByIndex::path::4.3:.#getrelativeroot)) ou absolu de ladite image.

#### Exemple de fichier video.html

.:CodeHighlight::HTML::False::<video controls poster="{poster}" style="width: 100%;">
{source}
Your browser does not support the video tag.
</video>:.

Ce qui est important ici, c'est la [variable python](https://docs.python.org/fr/3/tutorial/inputoutput.html#the-string-format-method) _source_ que VenC remplace par autant
d'occurence que nécessaire par des balises _source_ contenant la version du fichier courant.
Également la variable _poster_ contient l'url du poster passé en argument au motif.

##### Exemple d'utilisation

.:CodeHighlight::TEXT::False:: .:Escape::
.:Video::
  https://www.w3schools.com/html/mov_bbb::
  mp4,ogg::
  .:GetRelativeRoot:.bbb-poster.jpg
:.
:.
:.

Finalement, on obtient le résultat suivant :

.:Video::https://www.w3schools.com/html/mov_bbb::mp4,ogg:: .:GetRelativeRoot:.bbb-poster.jpg:.
