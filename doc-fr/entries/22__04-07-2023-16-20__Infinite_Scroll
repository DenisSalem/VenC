authors:
  - Denis Salem
categories:
  - ''
chapter: '4.6.2.2'
title: Défilement infini
---VENC-BEGIN-PREVIEW---
---VENC-END-PREVIEW---
Ce module Javascript permet de charger automatiquement les pages du blog
quand vous arrivez à la fin de la page courante.

## Inclure le défilement infini dans votre page

Pour pouvoir utiliser ce module, vous devez inclure dans le fichier
__`header.html`__ de votre thème deux scripts : 

- __`VenC-Scripts-Bootstrap-x.y.z.js`__ : ce script est obligatoire pour faire
fonctionner n'importe quel module.
- __`VenC-Infinite-Scroll-x.y.z.js`__ : il s'agit du script permettant le défilement infini.
Il doit être inclus __après__ `VenC-Scripts-Bootstrap`.

Une bonne façon de faire est d'inclure ces deux scripts de la façon suivante : 

.:CodeHighlightInclude::html::False::infinite-scroll-1:.

- __`IfInThread`__ permet de n'inclure le script que si le contexte l'exige,
ce qui permet de ne pas alourdir la page inutilement. Si dans votre thème
vous prévoyez de n'utiliser que le module de défilement infini, alors vous
pouvez déplacer le code incluant `VenC-Scripts-Bootstrap` dans le premier argument
de __`IfInThread`__.
- Si vous prévoyez de distribuer votre thème, le pattern __`IfInfiniteScrollEnabled`__
permet d'activer/désactiver l'inclusion du module depuis le fichier de
configuration principale de votre blog à l'aide de la variable booléenne __`disable_infinite_scroll`__.

## Inclure le défilement infini dans votre thème

Il y a deux façons de procéder :

- Vous pouvez copier le module et sa dépendance dans le répertoire _assets_
de votre thème depuis __`~/.local/share/VenC/themes_assets`__. C'est cette méthode qui est recommandée.
- Vous pouvez définir [un fichier de configuration de thème](.:GetChapterAttributeByIndex::path::4.6.1:.)
dans lequel vous indiquerez le nom des fichiers des modules que vous souhaitez
voir être exportés pendant la génération de votre blog.

## Structure d'une page

Pour que le défilement infini fonctionne, votre thème doit être structuré
d'une certaine manière, que nous allons détailler ici.

_Les exemples ci-dessous constituent un code minimal pour faire fonctionner le défilement infini._

### header.html

Comme nous l'avons vu, il faut que les scripts soient inclus dans le fichier __`header.html`__.
Idéalement de la façon suivante :

.:CodeHighlightInclude::html::False::inf-scroll-header-html:.

### entry.html

Chaque bloc contenant une publication __doit__ être de la classe "`entry`".
Sinon, le script de défilement infini n'est pas capable de reconnaître
les publications qu'il doit charger.

.:CodeHighlightInclude::html::False::inf-scroll-entry-html:.

### footer.html

Ici il y a trois éléments à considérer qui devrait se trouver dans __`footer.html`__
mais qui, si votre choix de mise en page l'impose, pourrait se trouver dans
__`header.html`__. Chaque élément ne devrait être présent qu'une et une seule fois dans la page.

- __`.:DisableMarkup::__VENC_LOADING__:.`__ : optionnel. L'élément ayant cet `id` peut être une image ou n'importe quoi d'autre
faisant office d'animation de chargement.
- __`.:DisableMarkup::__VENC_NAVIGATION__:.`__ : il s'agit de l'`id` de l'élément
contenant les liens de navigation. Quand le défilement infini est activé,
par défaut l'élément correspondant est rendu invisible.
- __`data-venc-api-infinite-scroll-hook`__ : l'élément ayant cet attribut permet au script de connaître
la page suivante. Ce n'est pas nécessairement un lien, mais dans la pratique, c'est plus commode que ce soit le cas.
Ce qui compte c'est que l'élément possède l'attribut __`data-venc-api-infinite-scroll-hook`__ dont la valeur
correspond au chemin de la page suivante. Cette valeur est accessible avec le pattern __`GetNextPage`__.

.:CodeHighlightInclude::html::False::inf-scroll-footer-html:.

## Personnaliser le défilement infini

VenC fourni une API pour personnaliser le défilement infini. Pour cela,
vous pouvez modifier les attributs de la variable globale __`VENC_INFINITE_SCROLL`__.

### hideVenCNavigation

.:CodeHighlight::Javascript::False::hideVenCNavigation: true:.

Normalement, les liens de navigation (numéro de page, page suivante/précédente)
contenus dans l'élément ayant l'`id` __`.:DisableMarkup::__VENC_NAVIGATION__:.`__
sont désactivés pour le défilement infini. Mais il est possible de ne pas
le faire et laisser ces éléments visibles en changeant la valeur de cette variable.

### interval

.:CodeHighlight::Javascript::False::interval: 250:.

Cette variable définit le temps, en millisecondes, entre chaque test
visant à savoir si la fin de la page a été atteinte et donc s'il faut
charger la suite. La valeur par défaut est 250 millisecondes.

### imageDefaultSetup

.:CodeHighlight::Javascript::False::imageDefaultSetup: function(img) {}:.

Cette méthode ne fait rien par défaut, mais si vous le souhaitez vous pouvez 
y configurer l'était initial des images dans une publication au
moment où celle-ci est chargée dans le DOM.

### entryDefaultSetup

.:CodeHighlight::Javascript::False::
entryDefaultSetup: function(entry) {
    entry.style.opacity = "0.0";
}
:.

Cette méthode permet d'initialiser l'état d'une publication au moment où elle est chargée
dans le DOM. Par défaut, les publications sont invisibilisées.

### onLoadImage

.:CodeHighlight::Javascript::False::onLoadImage : function(img) {}:.

Par défaut, cette fonction ne fait rien de particulier, mais permet si
vous le souhaitez de configurer l'état ou l'animation d'apparition
d'une image au moment où son téléchargement est terminé.

### onLoadEntry

.:CodeHighlight::Javascript::False::
onLoadEntry : function(entry){
    entry.style.transition = "opacity 0.5s ease";
    entry.style.opacity = "1.0";
}
:.

Par défaut quand une publication est chargée, elle apparaît avec une petite animation de transparence.
Vous pouvez redéfinir la fonction pour créer l'animation que vous souhaitez.

### dontWait

.:CodeHighlight::Javascript::False::dontWait: false:.

Par défaut, VenC attend que la page en cours de chargement soit entièrement téléchargée avant de récupérer la suivante.
Il est possible en changeant la valeur de cette variable à `True`, de charger plusieurs pages en même temps,
ce n'est cependant pas recommandé.

### loading

Quand le chargement d'une page est en cours, le script rend par défaut
visible l'icône de chargement de la page, si l'élément HTML ayant pour `id`
__`.:DisableMarkup::__VENC_LOADING__:.`__ existe. Cet élément est passé
en argument à la fonction suivante, qu'il est possible de
redéfinir :

.:CodeHighlight::Javascript::False::
loading : function(loading_image) {
    loading_image.style.opacity = "1.0";
}
:.

### idle

Quand le chargement est inactif, le script rend par défaut
invisible l'icône de chargement de la page, si l'élément HTML ayant pour `id`
__`.:DisableMarkup::__VENC_LOADING__:.`__ existe. Cet élément est passé
en argument à la fonction suivante, qu'il est possible de
redéfinir :

.:CodeHighlight::Javascript::False::
idle : function(loading_image) {
    loading_image.style.opacity = "0.0";
}
:.
