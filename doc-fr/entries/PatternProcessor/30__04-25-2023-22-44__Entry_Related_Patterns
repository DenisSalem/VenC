authors:
  - Denis Salem
categories:
  - ''
chapter: '5.4.1'
title: Motifs de publication
tree_test:
- a:
  - b:
    - c
    - d
  - e:
    - f
- g
---VENC-BEGIN-PREVIEW---
---VENC-END-PREVIEW---
Ces motifs permettent d'accéder à des métadonnées contenues dans une [publication](.:GetChapterAttributeByIndex::path::4.3:.). Ils ne
peuvent donc pas être utilisés en dehors d'une [publication](.:GetChapterAttributeByIndex::path::4.3:.) ou des fichiers ci-dessous composant
un thème :

- [`entry.html`](.:GetChapterAttributeByIndex::path::4.6:.)
- [`atomEntry.html`](.:GetChapterAttributeByIndex::path::4.6:.)
- [`rssEntry.html`](.:GetChapterAttributeByIndex::path::4.6:.)

#### CherryPickEntryMetadata

> .:Escape:: .:CherryPickEntryMetadata::branch_1[::branch_2::branch_n]:. :.

Permet de récupérer le contenu de la métadonnée contenue dans un ou plusieurs dictionnaires. Pour ce faire, cette fonction prend
au moins un paramètre qui désigne le nom d'un champ à la racine du document YAML d'une publication.

Par exemple :

> .:Escape:: .:CherryPickEntryMetadata::moo::foo::bar:. :.

#### CherryPickEntryMetadataIfExists

Identique à [`CherryPickEntryMetadata`](.:GetChapterAttributeByIndex::path::5.4.1:.#cherrypickentrymetadata), mais est ignoré en cas
d'erreur.

#### ForEntryAuthors

> .:Escape:: .:ForEntryAuthors::string::separator:. :.

Retourne la liste des auteurs de la publication.

Le premier argument est une chaîne de caractères à formater avec les variables :

- __`value`__ : contient le nom de l'auteur courant.
- __`html_id`__: le nom de l'auteur courant, mais formaté pour être utilisé comme un identifiant HTML.

Le second paramètre est une chaîne de caractères servant de séparateur.

#### ForEntryMetadata

> .:Escape:: .:ForEntryMetadata::metadata_name::string[::separator]:. :.

Ce motif permet de récupérer une métadonnée de type _liste_ présente dans la racine `yaml` d'une publication.
Ce motif a trois arguments :

- __`metadata_name`__ : le nom de la métadonnée que l'on souhaite récupérer. Si la métadonnée n'existe pas, VenC s'arrête avec un message d'erreur.
- __`string`__ : le second argument contient le texte à formater pour chaque élément de la liste.
- __`separator`__ : le troisième argument, optionnel, contient le texte utilisé comme séparateur pour chaque item.

Vous pouvez utiliser la variable suivante dans l'argument `string` :

- __`value`__ : contient la valeur de l'item courant.
- __`html_id`__ : le nom de la métadonnée courante, mais formaté pour être utilisé comme un identifiant HTML.

À Noter que le _formatage_ de __`string`__ se fait au sens de Python. C'est à dire que les methodes de formatages de chaines
de charactères fonctionne comme pour Python :

> string.format(**{"value":item, ...})

Si `item` (l'élément courant de la liste) est un `dictionnaire` il est possible de faire quelque chose comme

> .:Escape:: .:ForEntryMetadata::some_yaml_metadata::{value[key]}::,:. :.

#### ForEntryMetadataByKeyValue

> .:Escape:: .:ForEntryMetadataByKeyValue::metadata_name::string[::separator]:. :.

Comme pour [`ForEntryMetadata`](#forentrymetadata) ce motif permet de récuper des informations dans une liste, à la différence qu'ici
les éléments de la liste sont une paire de clef valeur, par exemple :

```
gamers_rank:
  - "Dade Murphy": 5
  - "Emmanuel Goldstein": 4
  - "Kate Libby": 5
  - "Ramon Sanchez": 3
  - "Paul Cook": 2 
```

Ce motif a trois arguments :

- __`metadata_name`__ : le nom de la métadonnée que l'on souhaite récupérer. Si la métadonnée n'existe pas, VenC s'arrête avec un message d'erreur.
- __`string`__ : le second argument contient le texte à formater pour chaque paire de la liste.
- __`separator`__ : le troisième argument, optionnel, contient le texte utilisé comme séparateur pour chaque item.

Vous pouvez utiliser la variable suivante dans l'argument `string` :

- __`key`__ : contient la clef de la paire courante.
- __`value`__ : contient la valeur de la paire courante.
- __`value_html_id`__ : la valeur de l'item courant, mais formaté pour être utilisé comme un identifiant HTML.
- __`key_html_id`__ : la valeur de l'item courant, mais formaté pour être utilisé comme un identifiant HTML.

À Noter que le _formatage_ de __`string`__ se fait au sens de Python. C'est à dire que les methodes de formatages de chaines
de charactères fonctionne comme pour Python :

> string.format(**{"value":item, ...})

Si `item` (l'élément courant de la liste) est un `dictionnaire` il est possible de faire quelque chose comme

> .:Escape:: .:ForEntryMetadata::some_yaml_metadata::{value[key]}::,:. :.

#### ForEntryMetadataByKeyValueIfExists

> .:Escape:: .:ForEntryMetadataByKeyValueIfExists::metadata_name::string[::separator]:. :.

Identique à [`ForEntryMetadataByKeyValue`](#forentrymetadatabykeyvalue), mais
si la métadonnée demandée n'existe pas, le motif est ignoré.

#### ForEntryMetadataIfExists

> .:Escape:: .:ForEntryMetadataIfExists::metadata_name::string::separator:. :.

Identique à [`ForEntryMetadata`](#forentrymetadata), mais
est ignoré si la métadonnée spécifiée dans **`metadata_name`** n'existe pas.

#### GetEntryArchivePath

> .:Escape:: .:GetEntryArchivePath:. :.

Retourne le liens vers le groupe d'archives dans lequel se trouve la publication.

#### GetEntryCategoriesTree

> .:Escape:: .:GetEntryCategoriesTree::open_node::open_branch::close_branch::close_node:. :.

Les catégories de la publication sont organisées sous la forme d'un arbre.
Il est possible de récupérer l'arbre entier afin, typiquement, de générer un menu
ou une liste de catégories et de sous-catégories.

Les arguments du motif sont les suivants :

- **`open_node`** : contient la chaîne de caractères d'ouverture pour la catégorie parente.
- **`open_branch`** : contient la chaîne de caractères d'ouverture de la catégorie courante.
- **`close_branch`** : contient la chaîne de caractères de fermeture de la catégorie courante.
- **`close_node`** : contient la chaîne de caractères de fermeture de la catégorie parente.

Les variables de ce motif sont les suivantes :

- __`value`__ : le nom de la catégorie courante.
- __`html_id`__: le nom de la catégorie courante, mais formaté pour être utilisé comme un identifiant HTML.
- __`path`__ : le chemin relatif de la catégorie courante.
- __`count`__ : le nombre de publications dans la catégorie courante.
- __`weight`__ : le nombre de publications dans la catégorie courante, divisé par le nombre de publications appartenant à une catégorie.
- __`childs`__ : contient le résultat de la récursion suivante du motif.

Par exemple, pour créer un menu déroulant on peut utiliser le motif comme ci-dessous :

.:CodeHighlight::HTML::False::
.:Escape:: .:GetEntryCategoriesTree::
    <ul>::
    <li><a href="{path}" title="{count} publications">{value}</a>::
    {childs}</li>::
    </ul>
:. :.
:.

Si la publication était incluse dans les catégories suivantes :

.:CodeHighlight::YAML::False::
categories:
  - Material:
    - Metal:
      - Copper
      - Steel
  - Science
:.

Alors le motif générerait quelque chose comme le code HTML suivant :

.:CodeHighlight::HTML::False::
<ul>
    <li>
        <a href="../Material/" title="1 publications">Material</a>
        <ul>
            <li>
                <a href="../Material/Metal/" title="1 publications">Metal</a>
                <ul>
                    <li><a href="../Material/Metal/Copper/" title="1 publications">Copper</a></li>
                    <li><a href="../Material-Metal/Steel/" title="1 publications">Steel</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li>
        <a href="../Science/" title="1 publications">Science</a>
    </li>
</ul>
:.

À la fin de chaque branche, si la catégorie courante possède une ou plusieurs
catégories filles, alors les arguments `open_node` et `close_node` sont ajoutés et
une nouvelle liste de sous-catégories est générée entre ces deux arguments,
en utilisant les arguments `open_branch` et `close_branch`.

Ce motif est ignoré et supprimé si la génération des catégories est désactivée dans le fichier de [configuration principale](.:GetChapterAttributeByIndex::path::4.2:.#disable-categories).

#### GetEntryCategoriesTreeFromBranches

.:CodeHighlight::Text::False:: .:Escape::
.:GetEntryCategoriesTreeFromBranches::
    branches::
    sub_tree_separator::
    open_node::
    open_branch::
    close_branch::
    close_node
:. :.
:.

Fonctionne comme [`GetBlogCategoriesTreeFromBranches`](.:GetChapterAttributeByIndex::path::5.4.2:.#getblogcategoriestreefrombranches) mais
 ne garde que les catégories où se trouve la publication courante.


#### GetEntryChapterLevel

> .:Escape:: .:GetEntryChapterLevel:. :.

Renvoie le niveau du chapitre de la publication.

Par exemple si la publication correspond au chapitre `'1.2.3'`, alors le motif renverrait `3` :

.:CodeHighlight::YAML::False::
chapter: '1.2.3'
:.

Si la publication correspond au chapitre `'4.5'`, alors le motif renverrait `2` :

.:CodeHighlight::YAML::False::
chapter: '4.5'
:.

#### GetEntryChapterPath

> .:Escape:: .:GetEntryChapterPath:. :.

Renvoie le chemin relatif du chapitre correspondant à la publication courante.

#### GetEntryDate

> .:Escape:: .:GetEntryDate[::format]:. :.

Retourne la date de la publication formatée comme définie dans le fichier de configuration par le champ `date_format`.

Il est possible d'utiliser un autre format de date à l'aide de l'argument optionnel `format`.
Pour en savoir plus sur ce format, rendez-vous [ici](https://strftime.org/).

#### GetEntryDay

> .:Escape:: .:GetEntryDay:. :.

Retourne le jour de création de la publication.

#### GetEntryHour

> .:Escape:: .:GetEntryHour:. :.

Retourne l'heure de création de la publication.

#### GetEntryID

> .:Escape:: .:GetEntryID:. :.

Retourne l'identifiant unique de la publication.

#### GetEntryMetadata

> .:Escape:: .:GetEntryMetadata::metadata_name:. :.

Il est possible de définir ses propres champs dans les métadonnées
d'une [publication](.:GetChapterAttributeByIndex::path::4.3:.) ou d'un [template](.:GetChapterAttributeByIndex::path::4.5:.).

Par exemple, si l'on définit le champ suivant :

.:CodeHighlight::YAML::False::
free_hardware : Arduino Mega
:.

Pour accéder à celui-ci, on utilisera le motif `GetEntryMetadata` de la façon suivante :

> .:Escape:: .:GetEntryMetadata::free_hardware:. :.

Si la métadonnée ainsi référencée n'existe pas,
VenC générera une erreur et stoppera la génération du site.

#### GetEntryMetadataIfExists

> .:Escape:: .:GetEntryMetadataIfExists::metadata_name[::string][::string2]:. :.

De façon similaire, il est possible d'essayer d'accéder à une métadonnée,
sans garantie que celle-ci existe. Si la métadonnée existe, il est possible alors de formater du texte pour l'y inclure.

Les arguments de ce pattern sont au nombre de trois :

- **`metadata_name`** : le nom de la métadonnée désirée.
- **`string`** : le texte formaté retourné si la condition est remplie. Optionnel. Si cet argument n'est pas présent, la fonction renvoie la valeur de la métadonnée sans formatage.
- **`string2`** : le texte non formaté retourné si la condition n'est pas remplie. Si cet argument n'est pas présent, le pattern est ignoré.

Il est possible d'utiliser la variable suivante dans l'argument __`string`__ pour formater le texte :

- __`value`__ : contient la valeur de la métadonnée qu'on référence.

#### GetEntryMetadataIfNotNull

> .:Escape:: .:GetEntryMetadataIfNotNull::metadata_name[::string][::string2]:. :.

Identique à [`GetEntryMetadataIfExists`](.:GetChapterAttributeByIndex::path::5.4.1:.#getentrymetadatatreeifexists), mais la métadonnée spécifiée ne doit pas être vide ou être `null`.

Par exemple: 

.:CodeHighlight::HTML::False::
.:Escape:: <div id="entry.:GetEntryID:." .:GetEntryMetadataIfExists::alternate_style::class="{value}":. >:.
:.

Si la métadonnée référencée n'est pas définie, si elle est vide ou `null`, VenC retourne `string2` (si cette chaîne est définie), sinon le motif est ignoré.

Si le second argument n'est pas défini, l'accesseur renvoie directement la variable référencée, si le test réussit.

#### GetEntryMetadataTree

.:CodeHighlight::Text::False:: .:Escape::
.:GetEntryMetadataTree::
    metadata_name::
    open_node::
    open_branch::
    value_childs::
    value::
    close_branch::
    close_node
:. :.
:.

Ce pattern permet de formater sous la forme d'un arbre une métadonnée d'une publication qui serait une structure de données.

Les arguments de ce motif sont les suivants :

- **`metadata_name`** : le nom de la métadonnée à laquelle on souhaite accéder. Si elle n'existe pas, VenC lève une exception.
- **`open_node`** : la chaîne de caractères ouvrant la liste courante.
- **`open_branch`** : la chaîne de caractères ouvrant l'item courant.
- **`value_childs`** : la chaîne de caractères composant l'item courant, si celui-ci a des items enfants.
- **`value`** : la chaîne de caractères composant l'item courant, si celui-ci n'a pas d'item enfant.
- **`close_branch`** : la chaîne de caractères fermant l'item courant.
- **`clode_node`** : la chaîne de caractères fermant la liste courante.

Ce motif possède les variables suivantes :

- __`value`__ : contient la valeur de l'item courant. Vous pouvez utiliser cette variable dans les arguments `value` et `value_childs`.
- __`html_id`__ : le nom de la métadonnée courante, mais formaté pour être utilisé comme un identifiant HTML.
- __`childs`__ : contient le bloc enfant de l'item courant. Vous ne pouvez utiliser cette variable que dans l'argument `value_childs`.

Voici un exemple d'utilisation de ce pattern. Étant donné la métadonnée suivante dans l'entête d'une publication :

.:CodeHighlight::YAML::False::
tree_test:
  - a:
    - b:
      - c
      - d
    - e:
      - f
  - g:.

Si l'on veut afficher `tree_test` sous la forme de listes imbriquées on pourrait utiliser le motif comme suit :

.:CodeHighlight::HTML::False:: .:Escape::
 .:GetEntryMetadataTree::
    tree_test::
    <ul>::
    <li>::
    {value} {childs}::
    {value}::
    </li>::
    </ul>
:. :.
:.

Ce qui donnerait :

.:GetEntryMetadataTree::tree_test::<ul>::<li>::{value} {childs}::{value}::</li>::</ul>:.


#### GetEntryMetadataTreeIfExists

.:CodeHighlight::Text::False:: .:Escape:: .:GetEntryMetadataTreeIfExists::
    metadata_name::
    open_node::
    open_branch::
    value_childs::
    value::
    close_branch::
    close_node
:. :.
:.

Identique à [`GetEntryMetadataTree`](.:GetChapterAttributeByIndex::path::5.4.1:.#getentrymetadatatree), mais le pattern
est ignoré si la métadonnée indiquée n'existe pas.

#### GetEntryMinute

> .:Escape:: .:GetEntryMinute:. :.

Retourne la minute de création de la publication.

#### GetEntryMonth

> .:Escape:: .:GetEntryMonth:. :.

Retourne le mois de création de la publication.

#### GetEntryPath

> .:Escape:: .:GetEntryPath:. :.

Retourne le chemin relatif de la publication
si VenC est configuré pour générer une page par publication.
Sinon, le motif est ignoré et supprimé.

#### GetEntryTitle

> .:Escape:: .:GetEntryTitle:. :.

Retourne le titre de la publication.

#### GetEntryToC

> .:Escape:: .:GetEntryToC::open_ul::open_li::content::close_li::close_ul:. :.

Ce motif permet de générer une table des matières multiniveaux sur la base des titres présents
dans le __corps__ d'une publication [Markdown](https://daringfireball.net/projects/markdown/syntax#header).

- **`open_ul`** : la chaîne de caractères ouvrant le niveau courant.
- **`open_li`** : la chaîne de caractères ouvrant l'item courant.
- **`content`** : la chaîne de caractères composant l'item courant, dans laquelle vous pouvez utiliser les variables du motif.
- **`close_li`** : la chaîne de caractères fermant l'item courant.
- **`clode_ul`** : la chaîne de caractères fermant le niveau courant.

Le motif a quelques variables qu'il est possible d'utiliser dans l'argument `content` :

- __`id`__ : contient l'`id` HTML de l'entête correspondant à l'item courant.
- __`title`__ : contient le titre de l'entête correspondant à l'item courant.
- __`level`__ : contient le niveau de l'entête correspondant à l'item courant.

Un usage classique ressemblerait à quelque chose comme :

.:CodeHighlight::Text::False:: .:Escape::
.:GetEntryToC::
    <ul>::
    <li>::
    <a href="#{id}" class="toc_level_{level}">{title}</a>::
    </li>::
    </ul>
:.
:. :.


Si dans la publication on trouvait les titres suivants :

.:CodeHighlight::Text::False::
# Title 1

## Title 1.1

### Title 1.1.1

## Title 1.2:.

Alors le code HTML généré ressemblerait à :

.:CodeHighlight::HTML::False::<ul>
    <li>
        <a href="#title-1" class="toc_level_1">Title 1</a>
        <ul>
            <li>
                <a href="#title-1-1" class="toc_level_2">Title 1.1</a>
                <ul>
                    <li>
                        <a href="#title-1-1-1" class="toc_level_3">Title 1.1.1</a>
                    </li>
                </ul>
            </li>
            <li>
                <a href="#title-1-2" class="toc_level_2">Title 1.2</a>
            </li>
        </ul>
    </li>
</ul>:.

Ce qui donne :

.:HTML::<ul>
    <li>
        <a href="#title-1" class="toc_level_1">Title 1</a>
        <ul>
            <li>
                <a href="#title-1-1" class="toc_level_2">Title 1.1</a>
                <ul>
                    <li>
                        <a href="#title-1-1-1" class="toc_level_3">Title 1.1.1</a>
                    </li>
                </ul>
            </li>
            <li>
                <a href="#title-1-2" class="toc_level_2">Title 1.2</a>
            </li>
        </ul>
    </li>
</ul>:.

Quelques remarques :

- Pour une meilleure intégration avec [Markdown](https://daringfireball.net/projects/markdown/), le motif peut rajouter des balises `</p>` et `<p>`, respectivement au début et à la fin du texte de sortie.
- Le motif ne teste pas la cohérence des niveaux des entêtes, une hiérarchie invalide peut donc produire une sortie incorrecte.
- Vous pouvez utiliser ce motif depuis votre thème dans __`entry.html`__ ou bien directement dans votre publication.

#### GetEntryYear

> .:Escape:: .:GetEntryYear:. :.

Retourne l'année de création de la publication.

#### GetFlattenedEntryCategories

> .:Escape:: .:GetFlattenedEntryCategories::string::separator:. :.

Permet de récupérer sous la forme d'une liste chaque item de l'arbre des catégories d'une publication.

Si la génération des fils de publications triés par catégorie est désactivée, ce motif est ignoré.

Les arguments de ce motif sont :

- __`string`__ : la chaîne de caractères correspondant à l'item courant.
- __`separator`__ : la chaîne de caractères qui sert de séparateur entre chaque item.

Dans l'argument `string` vous pouvez utiliser les variables suivantes :

- __`value`__ : le nom de la catégorie courante.
- __`html_id`__: le nom de la catégorie courante, mais formaté pour être utilisé comme un identifiant HTML.
- __`count`__ : le nombre de publications dans cette catégorie.
- __`weight`__ : le nombre de publications dans cette catégorie, divisé par le nombre de publications ayant une catégorie.
- __`path`__ : le chemin relatif menant au fil de publication de la catégorie courante.

#### GetFlattenedEntryCategoriesFromBranches

.:CodeHighlight::Text::Fals:: .:Escape::
.:GetFlattenedBlogCategoriesFromBranches::
  branches::
  sub_tree_string::
  sub_tree_separator::
  string::
  separator
:.
:. :.

Identique à [`GetFlattenedBlogCategoriesFromBranches`](.:GetChapterAttributeByIndex::path::5.4.2:.#getflattenedblogcategoriesfrombranches)
mais ne récupère que les catégories de la publication courante.

#### IfEntryMetadataIsTrue

> .:Escape:: .:IfEntryMetadataIsTrue::metadata_name::if_true[::if_false]:. :.

Permet d'afficher un texte ou un autre selon que la métadonnée indiquée est vraie ou fausse.

Ce motif possède les arguments suivants :

- **`metadata_name`** : le nom de la métadonnée qu'on teste. Le test de vérité est *pythonic*, c'est-à-dire que pour échouer la métadonnée ne doit pas exister ou doit être explicitement le booléen `False`.
- **`if_true`** : le texte à retourner si le test réussit.
- **`if_false`** : optionnel. Le texte à retourner si le test échoue.

