authors:
  - Denis Salem
categories:
  - Medium & Technique:
    - Dessin
    - Peintures:
      - Acrylique
      - Huile
    - Sculpture
    - Infographie
  - Licence:
    - CC-By-SA
    - CC-By-NC-ND
chapter: '5.4.2'
title: Motifs de blog
---VENC-BEGIN-PREVIEW---
---VENC-END-PREVIEW---
Ces motifs sont globaux, donc utilisables partout. Comme pour les motifs de publications,
ce sont les premiers à être interprétés par VenC. Contrairement aux motifs contextuels, ceux-là sont
exécutés une et une seule fois.

#### CherryPickBlogMetadata

> .:Escape:: .:CherryPickBlogMetadata::branch_1[::branch_2::branch_n]:. :.

Permet de récupérer le contenu de la métadonnée contenu dans un ou plusieurs dictionnaires. Pour ce faire, cette fonction prend
au moins un paramètre qui désigne le nom d'un champ à la racine du [fichier de configuration principale](.:GetChapterAttributeByIndex::path::4.2:.).

Par exemple :

> .:Escape:: .:CherryPickBlogMetadata::paths::rss_file_name:. :.

#### CherryPickBlogMetadataIfExists

Identique à [`CherryPickBlogMetadata`](.:GetChapterAttributeByIndex::path::5.4.2:.#cherrypickblogmetadata), mais est ignoré en cas
d'erreur.

#### ForBlogArchives

> .:Escape:: .:ForBlogArchives::string::separator:. :.

Ce motif permet de récupérer la liste des périodes archivées.
Le format de la période est défini dans le fichier de configuration
principal par [`archives_directory_name`](.:GetChapterAttributeByIndex::path::4.2:.#archives-directory-name).

- __`string`__ : le premier argument contient le texte à formater pour chaque élément de la liste de période.
- __`separator`__ : le second argument contient le texte utilisé comme séparateur.

Les variables de la fonction sont les suivantes :

- __`value`__ : la période courante, telle que définie par [`archives_directory_name`](.:GetChapterAttributeByIndex::path::4.2:.#archives-directory-name) dans le fichier de configuration principal du blog.
- __`html_id`__ : le nom de l'archive courante, mais formaté pour être utilisé comme un identifiant HTML.
- __`path`__ : le chemin relatif la période archivée.
- __`count`__ : le nombre de publications dans la période courante.
- __`weight`__ : le nombre de publications dans la période courante, divisé par le nombre maximal de publications par période.

Si la [génération des archives est désactivée](.:GetChapterAttributeByIndex::path::4.2:.#disable-archives), le motif est ignoré et supprimé.

#### ForBlogMetadata

> .:Escape:: .:ForBlogMetadata::metadata_name::string[::separator]:. :.

Ce motif permet de récupérer une métadonnée de type _liste_ présente dans
[`blog_configuration.yml`](.:GetChapterAttributeByIndex::path::4.2:.). Ce motif
a trois arguments :

- __`metadata_name`__ : le nom de la métadonnée que l'on souhaite récupérer. Si la métadonnée n'existe pas, VenC s'arrête avec un message d'erreur.
- __`string`__ : le second argument contient le texte à formater pour chaque élément de la liste.
- __`separator`__ : le troisième argument, optionnel, contient le texte utilisé comme séparateur pour chaque item.

Vous pouvez utiliser la variable suivante dans l'argument `string` :

- __`value`__ : contient la valeur de l'item courant.
- __`html_id`__ : la valeur de la métadonnée courante, mais formaté pour être utilisé comme un identifiant HTML.

À Noter que le _formatage_ de __`string`__ se fait au sens de Python. C'est à dire que les methodes de formatages de chaines
de charactères fonctionne comme pour Python :

> string.format(**{"value":item, ...})

Si `item` (l'élément courant de la liste) est un `dictionnaire` il est possible de faire quelque chose comme

> .:Escape:: .:ForBlogMetadata::some_yaml_metadata::{value[key]}::,:. :.

#### ForBlogMetadataByKeyValue

> .:Escape:: .:ForBlogMetadataByKeyValue::metadata_name::string[::separator]:. :.

Comme pour [`ForBlogMetadata`](#forblogmetadata) ce motif permet de récuper des informations dans une liste, à la différence qu'ici
les éléments de la liste sont une paire de clef valeur, par exemple :

```
gamers_rank:
  - "Dade Murphy": 5
  - "Emmanuel Goldstein": 4
  - "Kate Libby": 5
  - "Ramon Sanchez": 3
  - "Paul Cook": 2 
```

Ce motif a trois arguments :

- __`metadata_name`__ : le nom de la métadonnée que l'on souhaite récupérer. Si la métadonnée n'existe pas, VenC s'arrête avec un message d'erreur.
- __`string`__ : le second argument contient le texte à formater pour chaque paire de la liste.
- __`separator`__ : le troisième argument, optionnel, contient le texte utilisé comme séparateur pour chaque item.

Vous pouvez utiliser la variable suivante dans l'argument `string` :

- __`key`__ : contient la clef de la paire courante.
- __`value`__ : contient la valeur de la paire courante.
- __`value_html_id`__ : la valeur de l'item courant, mais formaté pour être utilisé comme un identifiant HTML.
- __`key_html_id`__ : la valeur de l'item courant, mais formaté pour être utilisé comme un identifiant HTML.

À Noter que le _formatage_ de __`string`__ se fait au sens de Python. C'est à dire que les methodes de formatages de chaines
de charactères fonctionne comme pour Python :

> string.format(**{"value":item, ...})

Si `item` (l'élément courant de la liste) est un `dictionnaire` il est possible de faire quelque chose comme

> .:Escape:: .:ForBlogMetadata::some_yaml_metadata::{value[key]}::,:. :.

#### ForBlogMetadataByKeyValueIfExists

> .:Escape:: .:ForBlogMetadataByKeyValueIfExists::metadata_name::string[::separator]:. :.

Identique à [`ForBlogMetadataByKeyValue`](#forblogmetadatabykeyvalue), mais
si la métadonnée demandée n'existe pas, le motif est ignoré.

#### ForBlogMetadataIfExists

> .:Escape:: .:ForBlogMetadataIfExists::metadata_name::string[::separator]:. :.

Identique à [`ForBlogMetadata`](.:GetChapterAttributeByIndex::path::5.4.2:.#forblogmetadata), mais
si la métadonnée demandée n'existe pas, le motif est ignoré.

#### ForEntriesSet

> .:Escape:: .:ForEntriesSet::entries_subset_key::string:. :.

Ce motif permet d'itérer sur un sous-ensemble de publications et
d'en afficher les attributs.

Il y a deux arguments :

- **`entries_subset_key`** : il s'agit de la clé correspondant au sous-ensemble de publications retourné par [`RangeEntriesByID`](.:GetChapterAttributeByIndex::path::5.4.2:.#rangeentriesbyid).
- **`string`** : la chaîne de caractères à formater comportant les variables référençant les attributs de la publication courante.

Les variables pouvant être utilisées sont par défaut :

- **`id`** : l'identifiant de la publication courante.
- **`title`** : le titre de la publication courante.
- **`path`** : le chemin relatif vers la publication courante.
- **`archive_path`** : le chemin relatif vers le groupe d'archives de la publication courante.
- **`chapter_path`** : le chemin relatif vers le chapitre correspondant à la publication courante. Si la génération de chapitre est désactivée, la variable est ignorée.

Il est également possible d'accéder à n'importe quelle métadonnée définie par l'utilisateur dans une publication. Si
la métadonnée n'existe pas le nom de la variable est simplement ignoré.

#### GetAuthorDescription

> .:Escape:: .:GetAuthorDescription:. :.

Retourne la description de l'auteur du blog définie dans [`author_description`](.:GetChapterAttributeByIndex::path::4.2:.#author-description).
Si la métadonnée est absente, le motif est ignoré.

#### GetAuthorEmail

> .:Escape:: .:GetAuthorEmail:. :.

Retourne l'adresse email de l'auteur du blog définie dans [`author_email`](.:GetChapterAttributeByIndex::path::4.2:.#author-email).
Si la métadonnée est absente, le motif est ignoré.

#### GetAuthorName

> .:Escape:: .:GetAuthorName:. :.

Retourne le nom de l'auteur du blog définie dans [`author_name`](.:GetChapterAttributeByIndex::path::4.2:.#author-name).
Si la métadonnée est absente, le motif est ignoré.

#### GetBlogCategoriesTree

> .:Escape:: .:GetBlogCategoriesTree::open_node::open_branch::close_branch::close_node:. :.

Les catégories du blog sont organisées sous la forme d'un arbre.
Il est possible de récupérer l'arbre entier afin, typiquement, de générer un menu
ou une liste de catégories et de sous-catégories.

Les arguments du motif sont les suivants :

- **`open_node`** : contient la chaîne de caractères d'ouverture pour la catégorie parente.
- **`open_branch`** : contient la chaîne de caractères d'ouverture de la catégorie courante.
- **`close_branch`** : contient la chaîne de caractères de fermeture de la catégorie courante.
- **`close_node`** : contient la chaîne de caractères de fermeture de la catégorie parente.

Les variables de ce motif sont les suivantes :

- __`value`__ : le nom de la catégorie courante.
- __`html_id`__: le nom de la catégorie courante, mais formaté pour être utilisé comme un identifiant HTML.
- __`path`__ : le chemin relatif de la catégorie courante.
- __`count`__ : le nombre de publications dans la catégorie courante.
- __`weight`__ : le nombre de publications dans la catégorie courante, divisé par le nombre de publications appartenant à une catégorie.
- __`childs`__ : contient le résultat de la récursion suivante du motif.

Par exemple, pour créer un menu déroulant on peut utiliser le motif comme ci-dessous :

.:CodeHighlight::HTML::False::
.:Escape:: .:GetBlogCategoriesTree::
    <ul>::
    <li><a href="{path}" title="{count} publications">{value}</a>::
    {childs}</li>::
    </ul>
:. :.
:.

Avec l'arbre de toutes les catégories du blog ci-dessous :

.:CodeHighlight::YAML::False::
  - Material:
    - Metal:
      - Copper
      - Steel
  - Science
:.

Le motif générerait quelque chose comme le code HTML suivant :

.:CodeHighlight::HTML::False::
<ul>
    <li>
        <a href="../Material/" title="5 publications">Material</a>
        <ul>
            <li>
                <a href="../Material/Metal/" title="5 publications">Metal</a>
                <ul>
                    <li><a href="../Material/Metal/Copper/" title="4 publications">Copper</a></li>
                    <li><a href="../Material-Metal/Steel/" title="1 publications">Steel</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li>
        <a href="../Science/" title="3 publications">Science</a>
    </li>
</ul>
:.

À la fin de chaque branche, si la catégorie courante possède une ou plusieurs
catégories filles, alors les arguments `open_node` et `close_node` sont ajoutés et
une nouvelle liste de sous-catégories est générée entre ces deux arguments,
en utilisant les arguments `open_branch` et `close_branch`.

Ce motif est ignoré et supprimé si la génération des catégories est désactivée dans le [fichier de configuration principale](.:GetChapterAttributeByIndex::path::4.2:.#disable-categories).


#### GetBlogCategoriesTreeFromBranches

.:CodeHighlight::Text::False:: .:Escape::
.:GetBlogCategoriesTreeFromBranches::
    branches::
    sub_tree_string::
    separator::
    open_node::
    open_branch::
    close_branch::
    close_node
:. :.
:.

Ce motif permet de mettre en œuvre la taxonomie avancée. En effet, via le premier argument `branches`, ce motif permet de sélectionner une ou plusieurs branches
de l'arbre des catégories pour l'afficher individuellement à l'intérieur de `sub_tree_string` comme le ferait [`GetBlogCategoriesTree`](#getblogcategoriestree).

Les arguments du motif sont les suivants :

- **`branches`** : contient le nom de la métadonnée définie dans le [`fichier de configuration`](.:GetChapterAttributeByIndex::path::4.2:.), qui elle même contient une liste de noms de branches. Ces noms de branches correspondent à des items à la racine de l'arbre des catégories.
- **`sub_tree_string`** : contient la chaîne de caractères contenant la branche courante.
- **`separator`** : contient la chaîne de caractères de séparation. Chaque itération de la branche courante est jointe avec le contenu de `separator`.
- **`open_node`** : contient la chaîne de caractères d'ouverture pour la catégorie parente.
- **`open_branch`** : contient la chaîne de caractères d'ouverture de la catégorie courante.
- **`close_branch`** : contient la chaîne de caractères de fermeture de la catégorie courante.
- **`close_node`** : contient la chaîne de caractères de fermeture de la catégorie parente.

Les variables de ce motif sont les suivantes :

- __`value`__ : le nom de la catégorie courante.
- __`html_id`__: le nom de la catégorie courante, mais formaté pour être utilisé comme un identifiant HTML.
- __`path`__ : le chemin relatif de la catégorie courante.
- __`count`__ : le nombre de publications dans la catégorie courante.
- __`weight`__ : le nombre de publications dans la catégorie courante, divisé par le nombre de publications appartenant à une catégorie.
- __`childs`__ : contient le résultat de la récursion suivante ou de l'itération courante du `motif`.

Pour illustrer ce motif un peu complexe, nous nous donnons pour exemple l'arbre de toutes les catégories d'un blog imaginaire :

.:CodeHighlight::YAML::False::
  - Medium & Technique:
    - Dessin
    - Peintures:
      - Acrylique
      - Huile
    - Sculpture
    - Infographie
  - Licence :
    - CC-By-SA
    - CC-By-NC-ND
:.


Nous pourrions vouloir un contrôle plus fin sur l'affichage de ces catégories. Par exemple en mettant en valeur `Medium & Technique` et `Licence`, qui
renseignent sur le type de catégories concerné.

.:CodeHighlight::HTML::False:: .:Escape:: .:GetBlogCategoriesTreeFromBranches::my_taxonomy::
    <div class="__VENC_TREE_ROOT__">
        <p class="title"><a href="{path}">{value}</a></p>
        {childs}
    </div>
  ::<hr>
  ::<ul class="__VENC_TREE_NODE__">
  ::<li><a class="engrave" href="{path}" title="{count} entries">{value}</a>
  ::{childs}</li>
  ::</ul>:. :.
:.

Ici, dans l'exemple, le nom de la métadonnée extraite du [`fichier de configuration`](.:GetChapterAttributeByIndex::path::4.2:.) du blog est `my_taxonomy`. Pour fonctionner
la métadonnée serait alors définie comme ci-dessous :

.:CodeHighlight::YAML::False::my_taxonomy:
  - Medium & Technique
  - Licence:.
  
Ce faisant `GetBlogCategoriesTreeFromBranches` va se comporter pour chaque item comme le ferait [`GetBlogCategoriesTree`](#getblogcategoriestree), en prenant pour racine l'item correspondant
au nom de la branche courante.

L'utilisation du motif comme dans l'exemple donnerait quelque chose comme :

.:CodeHighlight::HTML::False::<div class="__VENC_TREE_ROOT__">
  <p class="title">
    <a class="engrave" href="../Medium-&-Technique">Medium & Technique</a>
  </p>
  <ul class="__VENC_TREE_NODE__">
    <li>
      <a class="engrave" href="../Medium-&-Technique/Dessin" title="1 entries">Dessin</a>
    </li>
    <li>
      <a class="engrave" href="../Medium-&-Technique/Infographie" title="1 entries">Infographie</a>
    </li>
    <li>
      <a class="engrave" href="../Medium-&-Technique/Peintures" title="1 entries">Peintures</a>
      <ul class="__VENC_TREE_NODE__">
        <li>
          <a class="engrave" href="../Medium-&-Technique/Peintures/Acrylique" title="1 entries">Acrylique</a>
        </li>
        <li>
          <a class="engrave" href="../Medium-&-Technique/Peintures/Huile" title="1 entries">Huile</a>
        </li>
      </ul>
    </li>
    <li>
      <a class="engrave" href="../Medium-&-Technique/Sculpture" title="1 entries">Sculpture</a>
    </li>
  </ul>
</div>
<hr>
<div class="__VENC_TREE_ROOT__">
  <p class="title"><a class="engrave" href="../Licence">Licence</a></p>
  <ul class="__VENC_TREE_NODE__">
    <li>
      <a class="engrave" href="../Licence/CC-By-NC-ND" title="1 entries">CC-By-NC-ND</a>
    </li>
    <li>
      <a class="engrave" href="../Licence/CC-By-SA" title="1 entries">CC-By-SA</a>
    </li>
  </ul>
</div>:.

On peut faire remarquer qu'il est possible de définir dans votre [`fichier de configuration`](.:GetChapterAttributeByIndex::path::4.2:.) plusieurs
listes de branches. Ainsi vous pouvez utiliser `GetBlogCategoriesTreeFromBranches` à différent endroit de votre template graphique avec des valeurs
différentes pour l'argument `branches`.

__Note importante__ : `GetBlogCategoriesTreeFromBranches` ne peut sélectionner que des branches à la racine de l'arbre des catégories.

#### GetBlogDescription

> .:Escape:: .:GetBlogDescription:. :.

Retourne la description du blog définie dans [`blog_description`](.:GetChapterAttributeByIndex::path::4.2:.#blog-description).
Si la métadonnée est absente, le motif est ignoré.

#### GetBlogLanguage

> .:Escape:: .:GetBlogLanguage:. :.

Retourne la langue du blog définie dans [`blog_language`](.:GetChapterAttributeByIndex::path::4.2:.#blog-language).
Si la métadonnée est absente, le motif est ignoré.

#### GetBlogLicense

> .:Escape:: .:GetBlogLicense:. :.

Retourne la licence appliquée au contenu du blog définie dans [`license`](.:GetChapterAttributeByIndex::path::4.2:.#license).
Si la métadonnée est absente, le motif est ignoré.

#### GetBlogMetadata

> .:Escape:: .:GetBlogMetadata::metadata_name:. :.

Vous pouvez également définir vos propres métadonnées en rajoutant des champs au fichier de configuration
[`blog_configuration.yaml`](.:GetChapterAttributeByIndex::path::4.2:.). Par exemple, en ajoutant la
ligne suivante dans le fichier de configuration :

> Banner: 'maBanniere.jpg'

Vous pourrez ensuite récupérer la valeur de `Banner` avec :

> .:Escape:: .:GetBlogMetadata::Banner:. :.

Comme pour [`GetEntryMetadata`](.:GetChapterAttributeByIndex::path::5.4.1:.#getentrymetadata), si la métadonnée référencée n'existe pas, VenC générera une erreur et vous en indiquera l'origine.

#### GetBlogMetadataIfExists

> .:Escape:: .:GetBlogMetadataIfExists::metadata_name[::string][::string2]:. :.

De façon similaire, il est possible d'essayer d'accéder à une métadonnée, sans garantie
que celle-ci existe. Si la métadonnée existe, il est possible alors de formater du texte pour l'y inclure.

Les arguments de ce pattern sont au nombre de trois :

- **`metadata_name`** : le nom de la métadonnée désirée.
- **`string`** : le texte formaté retourné si la condition est remplie. Optionnel. Si cet argument n'est pas présent, la fonction renvoie la valeur de la métadonnée sans formatage.
- **`string2`** : le texte non formaté retourné si la condition n'est pas remplie. Si cet argument n'est pas présent, le pattern est ignoré.

Le formatage du texte se fait en utilisant une variable propre à l'argument `string` :

- __`value`__ : la valeur de la métadonnée qu'on référence.

#### GetBlogMetadataIfNotNull

> .:Escape:: .:GetBlogMetadataIfNotNull::metadata_name[::string][::string2]:. :.

Identique à [`GetBlogMetadataIfExists`](.:GetChapterAttributeByIndex::path::5.4.2:.#getblogmetadataifexists), mais la métadonnée spécifiée ne doit pas être vide pour que le test réussisse.

.:CodeHighlight::HTML::False:: .:Escape::
.:GetBlogMetadataIfExists::mastodon::
    <a href="{value}" class="social-network-item">
        <img src=".:GetRelativeRoot:.mastodon.png" alt="Mastodon" title="Mastodon"/>
    </a>
:. :.
:.

Dans cet exemple, on suppose que l'image de l'icône du réseau social se trouve à la
racine du blog, on a donc besoin de préciser son chemin relatif avec [`GetRelativeRoot`](.:GetChapterAttributeByIndex::path::5.3:.#getrelativeroot).

Si la variable référencée n'est pas définie, VenC ignore le motif et utilise à la place le bloc HTML passé en second argument.

Si le second argument n'est pas défini, le motif renvoie directement la variable référencée si elle existe et si elle n'est pas vide.

#### GetBlogMetadataTree

.:CodeHighlight::Text::False:: .:Escape:: .:GetBlogMetadataTree::
    metadata_name::
    open_node::
    open_branch::
    value_childs::
    value::
    close_branch::
    close_node
:. :.
:.

Ce pattern permet de formater sous la forme d'un arbre une métadonnée de blog qui serait une structure de données.

Les arguments de ce motif sont les suivants :

- **`metadata_name`** : le nom de la métadonnée auquel on souhaite accéder. Si elle n'existe pas, VenC lève une exception.
- **`open_node`** : la chaîne de caractères ouvrant la liste courante.
- **`open_branch`** : la chaîne de caractères ouvrant l'item courant.
- **`value_childs`** : la chaîne de caractères composant l'item courant si celui-ci a des items enfants.
- **`value`** : la chaîne de caractères composant l'item courant si celui-ci n'a pas d'items enfants.
- **`close_branch`** : la chaîne de caractères fermant l'item courant.
- **`clode_node`** : la chaîne de caractères fermant la liste courante.

Ce motif possède les variables suivantes :

- **`value`** : contient la valeur de l'item courant. Vous pouvez utiliser cette variable dans les arguments `value` et `value_childs`.
- __`html_id`__ : le nom de la métadonnée courante, mais formaté pour être utilisé comme un identifiant HTML.
- **`childs`** : contient le bloc enfant de l'item courant. Vous ne pouvez utiliser cette variable que dans l'argument `value_childs`.

Un exemple d'utilisation de ce pattern ci-dessous. Étant donné la métadonnée de publication suivante :

.:CodeHighlight::YAML::False::
tree_test:
  - a:
    - b:
      - c
      - d
    - e:
      - f
  - g
:.

Si l'on veut afficher `tree_test` sous la forme de listes imbriquées on pourrait utiliser le motif comme suit :

.:CodeHighlight::HTML::False:: .:Escape::
 .:GetEntryMetadataTree::
    tree_test::
    <ul>::
    <li>::
    {value} {childs}::
    {value}::
    </li>::
    </ul>
:. :.
:.

Ce qui donnerait :

.:GetBlogMetadataTree::
    tree_test::
    <ul>::
    <li>::
    {value} {childs}::
    {value}::
    </li>::
    </ul>
:.

#### GetBlogMetadataTreeIfExists

.:CodeHighlight::Text::False:: .:Escape:: .:GetBlogMetadataTreeIfExists::
    metadata_name::
    open_node::
    open_branch::
    value_childs::
    value::
    close_branch::
    close_node
:. :.
:.

Identique à [`GetBlogMetadataTree`](.:GetChapterAttributeByIndex::path::5.4.2:.#getblogmetadatatree), mais le pattern est ignoré si la métadonnée indiquée n'existe pas.

#### GetBlogName

> .:Escape:: .:GetBlogName:. :.

Retourne le titre du blog défini dans [`blog_name`](.:GetChapterAttributeByIndex::path::4.2:.#blog-name).

#### GetBlogURL

> .:Escape:: .:GetBlogURL:. :.

Retourne l'URL du blog définie dans [`blog_url`](.:GetChapterAttributeByIndex::path::4.2:.#blog-url). Le pattern est ignoré si `blog_url` n'est pas définit dans le fichier de configuration.

#### GetChapterAttributeByIndex

> .:Escape:: .:GetChapterAttributeByIndex::attribute_name::index_value:. :.

Ce motif permet de récupérer les propriétés d'un chapitre en spécifiant l'index de celui-ci.

Les arguments sont :

- **`attribute_name`** : le nom de la propriété du chapitre. Les noms de propriétés valides sont :
  - **`entry_id`** : l'`id` de la publication correspondant au chapitre spécifié dans `index_value`.
  - **`path`** : le chemin relatif du chapitre spécifié dans `index_value`.
  - **`title`** : le titre de la publication correspondant au chapitre spécifié dans `index_value`.
- **`index_value`** : la valeur de l'index du chapitre.

#### GetChapters

> .:Escape:: .:GetChapters::list_open::item_open::item_close::list_close:. :.

Ce motif permet de récupérer l'arborescence des chapitres du blog.
En effet, VenC permet d'organiser votre contenu comme le serait un livre ou un e-book.
La présente documentation est d'ailleurs faite ainsi.

Le motif a les mêmes arguments que [`GetEntryCategoriesTree`](.:GetChapterAttributeByIndex::path::5.4.1:.#getentrycategoriestree) et [`GetBlogCategoriesTree`](.:GetChapterAttributeByIndex::path::5.4.2:.#getblogcategoriestree)  :

- **`list_open`** : contient la chaîne de caractères d'ouverture du chapitre parent.
- **`item_open`** : contient la chaîne de caractères d'ouverture du chapitre courant.
- **`item_close`** : contient la chaîne de caractères de fermeture du chapitre courant.
- **`list_close`** : contient la chaîne de caractères de fermeture du chapitre parent.

Les variables contextuelles de la fonction sont les suivantes :

- __`index`__ : la valeur de la numérotation du chapitre courant. Par exemple : `'3.2'`, `'4.2.1'` ou bien `'2'`.
- __`level`__ : le niveau du chapitre courant. Par exemple :
  - Un chapitre avec l'index `'2'` aurait le niveau 0.
  - Un chapitre avec l'index `'3.2'` aurait le niveau 1.
  - Un chapitre avec l'index `'4.2.1'` aurait le niveau 2.
- __`title`__ : le titre du chapitre courant.
- __`html_id`__ : le titre du chapitre courant, mais formaté pour être utilisé comme un identifiant HTML.
- __`path`__ : le chemin relatif du chapitre courant.

Une utilisation typique du motif serait :

.:CodeHighlight::HTML::False::
.:Escape:: .:Chapters::
    <ul class="chapter-level{level}">::
    <li>{index}. <a href="{path}">{title}</a>::
    </li>::
    </ul>
:. :.
:.

La fonction générera alors le code HTML ci-dessous :

.:CodeHighlight::HTML::False::
<ul class="chapter-level0">
    <li>
        1. <a href="../Premier-Chapitre">Premier Chapitre</a>
    </li>
    <li>
        2. <a href="../Second-Chapitre">Second Chapitre</a>
    </li>
    <li>
        3. <a href="../Troisième-Chapitre">Troisième Chapitre</a>
        <ul class="chapter-level1">
            <li>
                3. <a href="../Premier-Sous-Chapitre-du-Troisième Chapitre">Premier Sous-Chapitre du Troisième Chapitre</a>
            </li>
        </ul>
</ul>
:.

Si la génération des chapitres est désactivée dans le fichier de configuration principal, le motif est ignoré et supprimé.

#### GetEntryAttributeByID

> .:Escape:: .:GetEntryAttributeByID::attribute::identifier:. :.

Ce motif permet de récupérer n'importe quelle métadonnée d'une publication,
en renseignant l'identifiant de la publication et le nom de la métadonnée désirée.

Les arguments du motif sont :

- __`attribute`__ : le nom de la métadonnée de la publication.
- __`identifier`__ : un nombre entier identifiant la publication ciblée.

Ce pattern permet de récupérer, en supplément des métadonnées définies dans l'entête YAML de la publication,
le chemin relatif de celle-ci avec `path`. Par exemple, pour obtenir le chemin relatif de la publication dont l'identifiant est 1337 :

> .:Escape:: .:GetEntryAttributeByID::path::1337:. :.

#### GetFlattenedBlogCategories

> .:Escape:: .:GetFlattenedBlogCategories::string::separator:. :.

Permet de récupérer sous la forme d'une liste chaque item de l'arbre des catégories du blog.

Si la génération des fils de publications triés par catégories est désactivée, ce motif est ignoré.

Les arguments de ce motif sont :

- __`string`__ : la chaîne de caractères correspondant à l'item courant.
- __`separator`__ : la chaîne de caractères qui sert de séparateur entre chaque item.

Dans l'argument `string` vous pouvez utiliser les variables suivantes :

- __`value`__ : le nom de la catégorie courante.
- __`html_id`__: le nom de la catégorie courante, mais formaté pour être utilisé comme un identifiant HTML.
- __`count`__ : le nombre de publications dans cette catégorie.
- __`weight`__ : le nombre de publications dans cette catégorie, divisé par le nombre de publications ayant une catégorie.
- __`path`__ : le chemin relatif menant au fil de publications de la catégorie courante.

#### GetFlattenedBlogCategoriesFromBranches

.:CodeHighlight::Text::Fals:: .:Escape::
.:GetFlattenedBlogCategoriesFromBranches::
  branches::
  sub_tree_string::
  sub_tree_separator::
  string::
  separator
:.
:. :.

- __`branches`__ : contient le nom de la métadonnée définie dans le fichier de configuration, qui elle-même contient une liste de noms de branche. Ces noms de branche correspondent à des items à la racine de l'arbre des catégories.
- __`sub_tree_string`__ : contient la chaîne de caractères contenant la branche courante.
- __`sub_tree_separator`__ : contient la chaîne de caractères de séparation. Chaque itération de la branche courante est jointe avec le contenu de`sub_tree_separator`.
- __`string`__ : la chaîne de caractères correspondant à l'item courant de la branche courante.
- __`separator`__ : la chaîne de caractères qui sert de séparateur entre chaque item.

Vous pouvez utiliser les variables suivantes dans `sub_tree_string` et `string`

- __`value`__ : le nom de la catégorie courante dans `string` et le nom de la branche courante dans `sub_tree_string`.
- __`html_id`__: le nom de la catégorie courante, mais formaté pour être utilisé comme un identifiant HTML.
- __`count`__ : le nombre de publications dans cette catégorie.
- __`weight`__ : le nombre de publications dans cette catégorie, divisé par le nombre de publications ayant une catégorie.
- __`path`__ : le chemin relatif menant au fil de publications de la catégorie courante.
- __`childs`__ : fonctionne uniquement dans `sub_tree_string`. Cette variable contient le contenu de la branche courante formaté dans `string`.

Cette fonction combine le concept de [`GetBlogCategoriesTreeFromBranches`](#getblogcategoriestreefrombranches) et de [`GetFlattenedBlogCategories`](#getflattenedblogcategories). C'est-à-dire
que les trois premiers arguments servent à exactement la même chose que dans [`GetBlogCategoriesTreeFromBranches`](#getblogcategoriestreefrombranches). Les autres arguments sont identiques à
ceux dans [`GetFlattenedBlogCategories`](#getflattenedblogcategories). En d'autres termes, ce motif permet de sélectionner une ou plusieurs branches de l'arbre des catégories et de construire
un nuage de catégories à partir de ces branches.

#### GetRootPage

> .:Escape:: .:GetRootPage:. :.

Ce motif renvoie le chemin relatif vers la page principale du blog qui
correspond généralement au fichier `index.html` et qui devrait se trouver
à la racine de votre site.

#### GetGenerationTimestamp

> .:Escape:: .:GetGenerationTimestamp::time_format:. :.

Ce motif renvoie la date formatée correspondant au moment où la page courante a été générée, quand VenC exporte votre site, par exemple avec : 

> venc -xb

Le seul paramètre de ce motif est :

- **`time_format`** : la chaîne de caractères permettant de formater la date courante. Le format utilisé est le même que celui utilisé par Python. La documentation est disponible [ici](https://strftime.org/).

#### IfAtomEnabled

> .:Escape:: .:IfAtomEnabled::string1[::string2]:. :.

La fonction teste si VenC est [configuré](.:GetChapterAttributeByIndex::path::4.2:.#disable-atom-feed) pour générer un flux Atom.

- __`string1`__ : texte retourné si la condition est remplie.
- __`string2`__ : optionnel. Texte retourné si la condition est fausse, et si en plus `string2` n'est pas défini, le motif est ignoré et supprimé.

#### IfBlogMetadataIsTrue

> .:Escape:: .:IfBlogMetadataIsTrue::metadata_name::if_true[::if_false]:. :.

Permet d'afficher un texte ou un autre selon que la métadonnée indiquée est vraie ou fausse.

Ce motif possède les arguments suivant :

- __`metadata_name`__ : le nom de la métadonnée qu'on teste. Le test de vérité est *pythonic*, c'est-à-dire que pour échouer la métadonnée ne doit pas exister ou doit être explicitement le booléen `False`.
- __`if_true`__ : le texte à retourner si le test réussi.
- __`if_false`__ : optionnel. Le texte à retourner si le test échoue.

#### IfCategories

> .:Escape:: .:IfCategories::string1[::string2]:. :.

La fonction teste si des catégories existent et si la génération des pages de celles-ci est bien activée dans le fichier de [configuration principale](.:GetChapterAttributeByIndex::path::4.2:.#disable-categories).

- __`string1`__ : texte retourné si la condition est remplie.
- __`string2`__ : optionnel. Texte retourné si la condition est fausse, et si en plus `string2` n'est pas défini, le motif est ignoré et supprimé.

#### IfChapters

> .:Escape:: .:IfChapters::string1[::string2]:. :.

La fonction teste si des chapitres existent et si la génération des pages de ceux-là est bien activée dans le fichier de [configuration principale](.:GetChapterAttributeByIndex::path::4.2:.#disable-chapters).

- __`string1`__ : texte retourné si la condition est remplie.
- __`string2`__ : optionnel. Texte retourné si la condition est fausse, et si en plus `string2` n'est pas défini, le motif est ignoré et supprimé.

#### IfFeedsEnabled

> .:Escape:: .:IfFeedsEnabled::string1[::string2]:. :.

La fonction teste si VenC est configuré pour générer un flux RSS et/ou un flux Atom.

- __`string1`__ : texte retourné si la condition est remplie.
- __`string2`__ : optionnel. Texte retourné si la condition est fausse, et si en plus `string2` n'est pas défini, le motif est ignoré et supprimé.

#### IfInfiniteScrollEnabled

> .:Escape:: .:IfInfiniteScrollEnabled::string1[::string2]:. :.

Permet de tester si l'option `disable_infinite_scroll` est définie dans le fichier de [configuration principale](.:GetChapterAttributeByIndex::path::4.2:.) et, si c'est le cas, quelle en est la valeur booléenne.

- __`string1`__ : texte retourné si la variable testée vaut `True`.
- __`string2`__ : optionnel. Texte retourné si la condition est fausse, et si en plus `string2` n'est pas défini, le motif est ignoré et supprimé.

#### IfRSSEnabled

> .:Escape:: .:IfRSSEnabled::string1[::string2]:. :.

La fonction teste si VenC est [configuré](.:GetChapterAttributeByIndex::path::4.2:.#disable-rss-feed) pour générer un flux RSS.

- __`string1`__ : texte retourné si la condition est remplie.
- __`string2`__ : optionnel. Texte retourné si la condition est fausse, et si en plus `string2` n'est pas défini, le motif est ignoré et supprimé.

#### RangeEntriesByID

> .:Escape:: .:RangeEntriesByID::begin_at::end_at:. :.

Retourne la clé correspond à une liste de publications sélectionnées à partir de l'identifiant
`begin_at` et allant dans l'ordre jusqu'à `end_at`.

Si `end_at` est plus petit que `begin_at` alors la liste des publications associées à la clé est triée
dans l'ordre décroissant.

Ce motif seul ne sert à rien. Il doit être utilisé
conjointement avec [`ForEntriesSet`](.:GetChapterAttributeByIndex::path::5.4.2:.#forentriesset)

Par exemple pour accéder aux publications d'identifiants 4 à 8, vous pouvez utiliser :

> .:Escape:: .:ForEntriesSet:: .:RangeEntriesByID::4::8:. ::{title}:. :.
