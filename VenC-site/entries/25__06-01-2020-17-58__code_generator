authors: ''
categories: ''
tags: ''
chapter: 5.3.3
title: Générateurs de code HTML
---VENC-BEGIN-PREVIEW---
---VENC-END-PREVIEW---

## .:Escape:: .:CodeHightlight::language::line&#95;numbers::input&#95;code:. ::EndEscape:.

VenC permet de formatter du code source pour qu'il soit plus lisible et
agréable à lire. Cette fonctionnalité dépend de la librairie tierce [Pygments](https://pygments.org/).

Ce motif prend trois arguments:

- __input&#95;code__ : Le code source que vous souhaitez formater.
- __language__ : Indique le langage du texte d'entrée.
La liste des langages supportés par Pygments est disponible [ici](https://pygments.org/languages/).
Si vous ne souhaitez pas coloriser le texte d'entrée utilisez la valeur "Text".
- __line&#95;numbers__: Il s'agit d'un booléen indiquant à VenC si vous
souhaitez générer des numéros de ligne.

Par exemple l'utilisation ci-dessous du motif

.:CodeHighlightInclude::Text::False::codehighlight_example1:.

générerais le code html suivant:

.:CodeHighlight::html::False::
<div class="__VENC_PYGMENTIZE_WRAPPER__">
    <div class="venc_source_C">
        <pre>
            <span></span>
            <span class="cp">#include</span>
            <span class="cpf">&lt;stdio.h&gt;</span>
            <span class="cp"></span>
            <span class="kt">int</span>
            <span class="nf">main</span>
            <span class="p">(</span>
            <span class="kt">int</span>
            <span class="n">argc</span>
            <span class="p">,</span>
            <span class="kt">char</span>
            <span class="o">**</span>
            <span class="n">argv</span>
            <span class="p">)</span> 
            <span class="p">{</span>
            <span class="n">printf</span>
            <span class="p">(</span>
            <span class="s">&quot;Hello VenC user!</span>
            <span class="se">\n</span>
            <span class="s">&quot;</span>
            <span class="p">);</span>
            <span class="k">return</span>
            <span class="mi">0</span>
            <span class="p">;</span>
            <span class="p">}</span>
        </pre>
    </div>
</div>
:.

Le style CSS du code source ainsi formaté est généré automatiquement par 
VenC dans un fichier et est placé dans le répertoire "extra" de votre projet.
Ces fichiers doivent être explicitement incluent dans votre page à l'aide du
motif __GetStyleSheets__ détaillé plus bas dans ce chapitre.

Dans l'example précédent, le fichier CSS crée serait le suivant

> venc&#95;source&#95;C.css

Pour adapter le style du formattage à votre mise en page vous pouvez définir
un style appliqué aux éléments enfants de la balise

.:CodeHighlight::HTML::False::<div class="__VENC_PYGMENTIZE_WRAPPER__"></div>:.

par exemple, pour la documentation que vous êtes en train de lire le style CSS
suivant est appliqué:

.:CodeHighlight::CSS::False::
.__VENC_PYGMENTIZE_WRAPPER__ > div
	{background-color: rgba(0,0,0,0.5);
	color: #FFF;
	font-size: 0.8em;
	padding:5px;
	border-bottom: 1px solid rgba(255,255,255,0.25);
	border-radius: 5px;}
    
.__VENC_PYGMENTIZE_WRAPPER__ > div
	{font-size: 1em;
	margin-left: 15px;
	margin-right: 15px;}

.__VENC_PYGMENTIZE_WRAPPER__ > div pre
	{overflow: hidden;
	margin-top: 0px;
	margin-left: 15px;
	margin-right: 15px;
	margin-bottom: 0px;}
:.

Il est important que le style ainsi définit soit inclut dans header.html __APRÈS__
utilisation du motifs __GetStyleSheets__.

## .:Escape:: .:CodeHightlightInclude::language::line&#95;numbers::input&#95;code&#95;file:. ::EndEscape:.

Ce motif fonctionne exactement comme le précédent motif __CodeHighlight__ à la différence que le dernier argument
ne contient pas de code source mais le nom de fichier dans lequel se trouve celui-ci.
Ce fichier source doit être placé dans le repertoire __includes__ de votre projet.

Ce motif est donc à préférer au précédent quand le code source est très long, et que vous ne souhaitez
pas "polluer" votre publication avec du code.

Notons que tous ce qui se trouve à l'intérieur du fichier ainsi inclue n'est
pas traité par le moteur de motifs de VenC.

## .:Escape:: .:GetStyleSheets:. ::EndEscape:.

Comme on l'a vu précédement VenC peut générer des feuilles de style CSS.
Ces fichiers peuvent être inclus dans votre thème avec le motif __GetStyleSheets__

Par exemple, pour la documentation que vous êtes en train de lire, l'utilisation
de ce motif produirait le code suivant:

.:CodeHighlight::HTML::False::
<link rel="stylesheet" href="../venc_source_Text.css" type="text/css" />
<link rel="stylesheet" href="../venc_source_html.css" type="text/css" />
<link rel="stylesheet" href="../venc_source_HTML.css" type="text/css" />
<link rel="stylesheet" href="../venc_source_CSS.css" type="text/css" />
:.

## .:Escape:: .:Latex2MathML::latex_code:. ::EndEscape:.

Ce motif vous permet de générer du code [MathML](https://www.w3.org/Math/)
converti depuis le langage très populaire [LaTeX](https://www.latex-project.org/).
Ainsi, vous pouvez facilement inclure dans votre publication des formules mathématiques.

Cette fonctionnalité dépend d'une librairie tierce indépendante de VenC.
En cas de problème ou de difficulté vous pourriez vouloir signaler un bug
sur [la page du projet latex2mathml](https://github.com/roniemartinez/latex2mathml)

Le seul argument du motif est:

- __latex&#95;code__ : Le code source LaTeX de la formule que vous souhaitez intégrer.

Par exemple:

> .:Escape:: .:Latex2MathML:: \overline{z^{n+1}} = {\overline{z}}^{n+1}:. ::EndEscape:.

produirait le code suivant

.:CodeHighlight::HTML::False::
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML">
    <mrow>
        <mover>
            <mrow>
                <msup>
                    <mi>z</mi>
                    <mrow>
                        <mi>n</mi>
                        <mo>&#x0002B;</mo>
                        <mn>1</mn>
                    </mrow>
                </msup>
            </mrow>
            <mo stretchy="true">&#x000AF;</mo>
        </mover>
        <mo>&#x0003D;</mo>
        <msup>
            <mrow>
                <mover>
                    <mrow>
                        <mi>z</mi>
                    </mrow>
                    <mo stretchy="true">&#x000AF;</mo>
                </mover>
            </mrow>
            <mrow>
                <mi>n</mi>
                <mo>&#x0002B;</mo>
                <mn>1</mn>
            </mrow>
        </msup>
    </mrow>
</math>
:.

## .:Escape:: .:SetColor::input_text::color:. ::EndEscape:.

Ce motif permet de formater du texte avec la couleur de son choix et prend deux arguments:

- __input&#95;text__ : Le texte à formater. Peut contenir d'autres motifs.
- __color__ : La couleur désirée tel que spécifié par CSS.

Par exemple

> .:Escape:: .:SetColor::Texte de couleur rouge::red:. ::EndEscape:.

produira le code HTML suivant

.:CodeHighlight::HTML::False::
<span class="__VENC_TEXT_COLOR__" style="color: red;">Texte de couleur rouge</span>
:.

On remarque que la balise span a pour class __&#95;&#95;VENC&#95;TEXT&#95;COLOR&#95;&#95;__
ce qui permet plus de contrôle lors de la mise en page de votre blog.

## .:Escape:: .:SetStyle::tag&#95;id::tag&#95;class::content:. ::EndEscape:.

Ce motif permet d'assigner un __id__ et une __class__ CSS à une paire de balise
__span__ ajouté par VenC pour encapsuler le texte passé en paramètre.

Ce motif prend donc trois paramètre:

- __tag&#95;id__ : Le nom de l'id CSS à assigner au texte.
- __tag&#95;class__ : Le nom de la classe CSS à assigner au texte.
- __content__ : Le texte auquel vous souhaitez appliquer un style CSS.

Par exemple

> .:Escape:: .:SetStyle::mon&#95;id::ma&#95;class::Un texte quelconque à formatter. :. ::EndEscape:.

produirait

.:CodeHighlight::HTML::False::
<span id="ma_class" class="ma_class">Un texte quelconque à formatter.</span>
:.

## .:Escape:: .:Table[::item1][::item2][...]:. ::EndEscape:.

Ce motif permet d'organiser du contenu dans une table. Le motif a un
nombre illimité d'arguments. Chaque argument correspond au contenu d'une cellule.

Quand VenC détect qu'un argument est égale à la valeur __NewLine__ une nouvelle
ligne est inséré et poursuit l'ajout des cellules du tableau pour chaque argument.

Par exemple pour créer un tableau de quatre cellules et deux lignes

.:CodeHighlightInclude::Text::False::table_example_1:.

Ce qui produira le code suivant

.:CodeHighlight::HTML::False::
<div class="__VENC_TABLE__">
    <table>
        <tr>
            <td>VenC version:</td>
            <td>2.0.0</td>
        </tr>
        <tr>
            <td>Date</td>
            <td>11-06-2020</td>
        </tr>
    </table>
</div>
:.

Comme on le voit, il est possible d'utiliser des motifs VenC à
l'intérieur du motif __Table__. Remarquons également que pour chaque
cellule les caractères blancs au début et à la fin de l'argument
correspondant sont effacé.
