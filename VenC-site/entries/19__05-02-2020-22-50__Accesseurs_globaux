authors:
- Denis Salem
categories:
- ''
chapter: 5.2.2
tags:
- ''
title: Accesseurs globaux
---VENC-BEGIN-PREVIEW---
---VENC-END-PREVIEW---

Ces motifs sont disponibles quelque soit le contexte et
leurs valeurs sont définis dans blog_configuration.yaml.

## .:Escape:: .:GetAuthorName:. ::EndEscape:.
Retourne le nom de l'auteur du blog.

## .:Escape:: .:GetBlogName:. ::EndEscape:.
Retourne le titre du blog.

## .:Escape:: .:GetBlogDescription:. ::EndEscape:.
Retourne la description du blog.

## .:Escape:: .:GetBlogKeywords:. ::EndEscape:.
Retourne les mots-clefs décrivant le blog.

## .:Escape:: .:GetAuthorDescription:. ::EndEscape:.
Retourne la description de l'auteur du blog.

## .:Escape:: .:GetBlogLicense:. ::EndEscape:.
Retourne la licence appliquée au contenu du blog.

## .:Escape:: .:GetBlogURL:. ::EndEscape:.
Retourne l'URL du blog.

## .:Escape:: .:GetBlogLanguage:. ::EndEscape:.
Retourne la langue du blog.

## .:Escape:: .:GetAuthorEmail:. ::EndEscape:.
Retourne l'adresse email de l'auteur du blog.

##  .:Escape:: .:GetBlogMetadata::metadata_name:. ::EndEscape:.

Vous pouvez également définir vos propres métadonnées en rajoutant des
champs au fichier de configuration blog_configuration.yaml. Par exemple
en rajoutant la ligne suivante dans le fichier de configuration :

> Banner: 'maBanniere.jpg'

Vous pourrez ensuite récupérer la
valeurs de Banner avec :

> .:Escape:: .:GetBlogMetadata::Banner:. ::EndEscape:.

Comme pour __GetEntryMetadata__, si la métadonnée référencée n'existe pas,
VenC générera une erreur et vous en indiquera l'origine.

## .:Escape:: .:GetBlogMetadataIfExists::metadata_name[::string][::string2]:. ::EndEscape:.

De façon similaire, il est possible d'essayer d'accéder à une métadonnée,
sans garantie que celle-ci existe. Si la métadonnée existe, il est possible
alors de formater du texte pour y inclure celle-ci.

.:CodeHighlightInclude::html::False::GetBlogMetadataIfExists_example:.

Le formatage du texte se fait en utilisant des variables contextuelles
propre à la fonction :

- __{value}__ : la valeur de la métadonnée qu'on référence.

Les arguments de ce pattern sont au nombre de trois :

- __metadata&#95;name__ : le nom de la métadonnée désirée.
- __string__ : le texte formaté retourné si la condition est remplie. Optionnel. Si cet
argument n'est pas présent, la fonction renvoie la valeur de la métadonnée sans formatage.
- __string2__ : le texte non formaté retourné si la condition n'est pas
remplie. Si cet argument n'est pas présent, le pattern est ignoré.

## .:Escape:: .:GetBlogMetadataIfNotNull::metadata_name[::string][::string2]:. ::EndEscape:.

Identique à __GetBlogMetadataIfExists__, mais la métadonnée spécifiée ne
doit pas être vide.

.:CodeHighlightInclude::html::False::GetBlogMetadataIfNotNull_example:.

Dans cet example, on suppose que l'image de l'icône du réseau social se
trouve à la racine du blog, on a donc besoin de préciser son chemin
relatif avec la variable contextuelle {relative_origin}.

Si la variable référencée n'est pas définie VenC ignore le motif et le
supprime.

Si le second argument n'est pas définit, l'accesseur renvoie directement
la variable référencée si elle existe.

## .:Escape:: .:ForBlogArchives::string::separator:. ::EndEscape:.

Ce motif permet de récupérer la listes des périodes archivées. Le format
de la période de temps est défini dans le fichier de configuration
principal par le champ __archives&#95;directory&#95;name__.

- Le premier argument __string__ contient le texte à formater pour chaque
élément de la liste de période.
- Le second argument __separator__ contient le texte utilisé comme séparateur.

Les variables contextuelles de la fonction sont les suivantes :

- __{value}__ : la période courante, tel que défini par __archives&#95;directory&#95;name__
dans le fichier de configuration principal du blog.
- __{path}__ : le chemin relatif la période archivée.
- __{count}__ : le nombre de publications dans la période courante.
- __{weight}__ : le nombre de publications dans la période courante divisé
par le nombre maximal de publications par période.

Si la génération des archives est désactivée, le motif est ignoré et supprimé.

## .:Escape:: .:ForBlogMetadata::metadata_name::string::separator:. ::EndEscape:.

Ce motif permet de récupérer la liste identifiée par "metadata_name" est défnit dans le fichier de configuration du blog.

- Le premier argument __metadata_name__ indique le nom de la métadonnée qu'on souhaite récupérer. Si la métadonnée n'existe pas, VenC lève une exception
- Le second argument __string__ contient le texte à formater pour chaque élément de la liste de période.
- Le troisième argument __separator__ contient le texte utilisé comme séparateur.

Les variables contextuelles de la fonction sont les suivantes :

- {value} : Correspond à l'item courant de l'iteration.

## .:Escape:: .:ForBlogMetadataIfExists::metadata_name::string::separator:. ::EndEscape:.

Identique à __ForBlogMetadata__ mais retourne une chaine vide, si le nom de métadonnée indiqué n'existe pas.

## .:Escape:: .:LeavesForBlogCategories::string::separator:. ::EndEscape:. 

Les catégories sont organisées sous la forme d'un arbre. Il est
possible de ne récupérer que les "feuilles" de cet arbres, c'est-à-dire
les catégories qui n'ont pas de sous-catégories.

Le motif fonctionne comme __LeavesForEntryCategories__
mais construit l'arborescence des catégories en compilant toutes les
catégories de toutes les publications.

Les arguments du motif sont les suivants :

- __string__ : la chaîne de caractères à formater avec des variables
contextuelles.
- __separator__ : la chaîne de caractère qui sert de séparateur.

LeavesForBlogCategories possède les variables contextuelles suivante :

- __{value}__ : contient le nom de la catégorie courante.
- __{path}__ : contient le chemin relatif de la catégorie courante.
- __{branch}__ : contient la branche complète de la catégorie; de la
racine de l'arborescence,
 jusqu'à la catégorie courante.

Par exemple, imaginons que l'arborescence des catégories du blog se
présente de la façon suivante :

.:CodeHighlight::Text::False::
├─── Science 
│    ├─── Chemistry
│    └─── Physics
└─── Art
     ├─── Music
     └─── Painting
:.

Alors :

> .:Escape:: .:LeavesForEntryCategories::{value}::,:. ::EndEscape:.

Retournera :

> Chemestry,Physic,Music,Painting

Ce motif est ignoré et supprimé si la génération des catégories est
désactivée dans le fichier de configuration principal.

## .:Escape:: .:GetChapters::open_node::open&#95;branch::close&#95;branch::close&#95;node:. ::EndEscape:.

Ce motif permet de récupérer l'arborescence des chapitres du blog. En effet,
VenC permet d'organiser
votre contenu comme le serait un livre ou un e-book. La présente
documentation est d'ailleurs faite ainsi.

Le motif a les mêmes arguments que __TreeForEntryCategories__ et __TreeForBlogCategories__ :

- open_node : contient la chaîne de caractère d'ouverture du chapitre parent.
- open_branch : contient la chaîne de caractère d'ouverture du chapitre courant.
- close_branch : contient la chaîne de caractère de fermeture du chapitre courant.
- close_node : contient la chaîne de caractère de fermeture du chapitre parent.

Les variables contextuelles de la fonction sont les suivantes :

- __{index}__ : la valeur de la numérotation du chapitre courant.
Par exemple '3.2', '4.2.1' ou bien '2'.
- __{level}__ : le niveau du chapitre courant. Par exemple un chapitre avec
 l'index '3.2' aurait le niveau 1. Un chapitre avec l'index '4.2.1' aurait
 le niveau 2 et un chapitre avec l'index '2' aurait le niveau 0.
- __{title}__ : le titre du chapitre courant.
- __{path}__ : le chemin relatif du chapitre courant.

Une utilisation typique du motif serait :

.:CodeHighlightInclude::html::False::Chapters_example:.

La fonction générera alors par exemple le code HTML ci-dessous :

.:CodeHighlight::html::False::
<ul class="chapter-level0">
    <li>
        1. <a href="../Premier-Chapitre">Premier Chapitre</a>
    </li>
    <li>
        2. <a href="../Second-Chapitre">Second Chapitre</a>
    </li>
    <li>
        3. <a href="../Troisième-Chapitre">Troisième Chapitre</a>
        <ul class="chapter-level1">
            <li>
                3. <a href="../Premier-Sous-Chapitre-du-Troisième Chapitre">Premier Sous-Chapitre du Troisième Chapitre</a>
            </li>
        </ul>
</ul>
:.

Si la génération des chapitres est désactivée dans le fichier de
configuration principal, le motif est ignoré et supprimé.

## .&colon;GetThreadName[::string1][::string2]&colon;.

Ce motif permet de récupérer le nom du fil de publication courant.

Par exemple, si la page courange est générée dans un fil de publication de
type _categorie_ et que ladite catégorie s'appel "Histoire de
l'informatique", alors __GetThreadName__ permet de récupérer cette valeur
dans une chaîne de caractères formatée correspondant
à l'argument __string1__. Si au contraire, le fil de publication n'a
pas de nom alors c'est __string2__ qui est renvoyée.

- __string1__ : premier argument du motif, c'est celui qui est renvoyé si
le fil de publication a un nom. Pour accéder au nom du fil de publication
dans l'argument, il faut utiliser la variable contextuelle __{value}__.
- __string2__ : second argument du motif, c'est celui qui est renvoyé si
le fil de publication n'a _pas_ de nom. Cet argument n'a pas de variable
contextuelle. Si c'est cet argument qui doit être utilisé par le motif
et qu'il est manquant, le motif est ignoré.

## .:Escape:: .:GetEntryAttributeByID::attribute::identifier:. ::EndEscape:.

Ce motif permet de récupérer n'importe quelle métadonnée d'une publication,
en renseignant l'identifiant de la publication et le nom de la métadonnée désirée.

- __attribute__ : le nom de la métadonnée de la publication.
- __identifier__ : un nombre entier identifiant la publication ciblée.

Ce pattern permet de récupérer, entre autres métadonnées définis dans
le header YAML de la publication, l'url de celle-ci. Par exemple :

> .:Escape:: .:GetEntryAttributeByID::url::1337:. ::EndEscape:.

Renverra le permalien relatif de la publication dont l'identifiant est 1337.

## .:Escape:: .:GetChapterAttributeByIndex::attribute::index:. ::EndEscape:.

Ce motif permet de récupérer n'importe quelle métadonnée d'un chapitre en
renseignant son index.

- __attribute__ : nom de la métadonnée du chapitre.
- __index__ : index du chapitre dont on veut récupérer la métadonnée.

Typiquement ce pattern sert à récupérer le titre
du chapitre, ou son chemin. Par exemple :

> .:Escape:: .:GetChapterAttributeByIndex::path::1.2.3:. ::EndEscape:.

Renverra le permalien relatif du chapitre 1.2.3.

> .:Escape:: .:GetChapterAttributeByIndex::title::4.2:. ::EndEscape:.

Renverra le permalien relatif du chapitre 4.2.

## .:Escape:: .:TreeForBlogCategories::open&#95;node::open&#95;branch::close&#95;branch::close&#95;node:. ::EndEscape:.

Les catégories de la publication sont organisées sous la forme d'un arbre.
Il est possible de récupérer l'arbre entier afin, typiquement, de générer
un menu ou une liste de catégories et de sous-catégories.

Le motif fonctione comme __TreeForEntryCategories__
mais construit l'arborescence des catégories en compilant toutes les
catégories de toutes les publications.

Les arguments du motif sont :

- __open&#95;node__ : contient la chaîne de caractère d'ouverture pour
la catégorie parente.
- __open&#95;branch__ : contient la chaîne de caractère d'ouverture de
la catégorie courante.
- __close&#95;branch__ : contient la chaîne de caractère de fermeture de
la catégorie courante.
- __close&#95;node__ : contient la chaîne de caractère de fermeture de
la catégorie parente.

Les variables contextuelles de ce motif sont les suivantes :

- __{value}__ : le nom de la catégorie courante.
- __{path}__ : le chemin relatif de la catégorie courante.
- __{count}__ : le nombre de publication dans la catégorie courante.
- __{weight}__ : le nombre de publication dans la catégorie courante divisé par le total des publications.
- __{childs}__ : contient la récursion suivante dans le traitement de l'arbre de donnée.

Par exemple, pour créer un menu déroulant, on utilisera le motif comme
ci-dessous :

.:CodeHighlightInclude::html::False::TreeForBlogCategories_example:.

Si l'ensemble des catégories du blog formait l'arborescence suivante :

.:CodeHighlight::Text::False::
├─── Material
│    └─── Metal
│          ├─── Copper
│          └─── Steel
└─── Science
:.

Alors le motif générera quelque chose comme le code HTML suivant :

.:CodeHighlight::html::False::
<ul>
    <li>
        <a href="../Material/" title="1 publications">Material</a>
        <ul>
            <li>
                <a href="../Material/Metal/" title="1 publications">Metal</a>
                <ul>
                    <li><a href="../Material/Metal/Copper/" title="1 publications">Copper</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li>
        <a href="../Material-Metal/" title="1 publications">Material Metal</a>
        <ul>
            <li>
                <a href="../Material-Metal/Steel/" title="1 publications">Steel</a>
            </li>
        </ul>
    </li>
    <li>
        <a href="../Science/" title="1 publications">Science</a>
    </li>
</ul>
:.

À la fin de chaque branche, si la catégorie courante possède une ou
plusieurs catégories filles, alors les arguments open&#95;node et
close&#95;node sont ajoutés et une nouvelle liste de sous-catégories
est générée entre ces deux arguments, en utilisant les arguments
open&#95;branch et close&#95;branch.

Ce motif est ignoré et supprimé si la génération des catégories est
désactivée dans le fichier de configuration principal.

## TreeForMetadata

- TreeForEntryMetadataIfExists
- TreeForEntryMetadata
- TreeForBlogMetadataIfExists
- TreeForBLogMetadata

Grace à Yaml il est possible de définir des structures de donnée complexes. Par exemple
un arbre de donnée :

.:CodeHighlight::yaml::False::
tree_datastructur:
  - cobalt
  - mercury
  - alkali:
    - lithium
    - manganese
  - titane
  - gold
:.

Pour tout un tas de raison, ont peut vouloir récupérer ces données pour les afficher d'une façon particulière sur sont site
