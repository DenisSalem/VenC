authors: 'Denis Salem'
categories: ''
tags: ''
chapter: 5.1.2
title: Accesseurs globaux
---VENC-BEGIN-PREVIEW---
---VENC-END-PREVIEW---

Ces motifs sont disponibles quelque soit le contexte et
leurs valeurs sont définis dans blog_configuration.yaml.

## .:Escape:: .:GetAuthorName:. ::EndEscape:.
Retourne le nom de l'auteur du blog.

## .:Escape:: .:GetBlogName:. ::EndEscape:.
Retourne le titre du blog.

## .:Escape:: .:GetBlogDescription:. ::EndEscape:.
Retourne la description du blog.

## .:Escape:: .:GetBlogKeywords:. ::EndEscape:.
Retourne les mots clefs décrivant le blog.

## .:Escape:: .:GetAuthorDescription:. ::EndEscape:.
Retourne la description de l'auteur du blog.

## .:Escape:: .:GetBlogLicense:. ::EndEscape:.
Retourne la licence appliquée au contenu du blog.

## .:Escape:: .:GetBlogURL:. ::EndEscape:.
Retourne l'URL du blog.

## .:Escape:: .:GetBlogLanguage:. ::EndEscape:.
Retourne le language du blog.

## .:Escape:: .:GetAuthorEmail:. ::EndEscape:.
Retourne l'adresse email de l'auteur du blog.

##  .:Escape:: .:GetBlogMetadata::metadata_name:. ::EndEscape:.

Vous pouvez également définir vos propres métadonnées en rajoutant des
champs au fichier de configuration blog_configuration.yaml. Par exemple
en rajoutant la ligne

> Banner: 'maBanniere.jpg'

dans le fichier de configuration, vous pourrez ensuite récupérer la
valeurs de Banner avec

> .:Escape:: .:GetBlogMetadata::Banner:. ::EndEscape:.

Comme pour __GetEntryMetadata__, si la métadonnée référencée n'existe pas,
VenC générera une erreur et vous en indiquera l'origine.

## .:Escape:: .:GetBlogMetadataIfExists::metadata_name[::string][::string2]:. ::EndEscape:.

De façon similaire, il est possible d'essayer d'accéder à une metadonnée,
sans garantie que celle-ci existe. Si la métadonnée existe, il est possible
alors de formater du texte pour y inclure celle-ci.

Le formatage du texte se fait en utilisant des variables contextuelles
propre à la fonction:

- __{value}__ : La valeur de la métadonnée qu'on référence.

Les arguments de ce pattern sont au nombre de trois :

- __metadata&#95;name__ : Le nom de la métadonnée désirée.
- __string__ : Le texte formaté retourné si la condition est remplie. Optionnel. Si cet
argument n'est pas présent, la fonction renvoie la valeur de la métadonnée sans formatage.
- __string2__ : Le texte non formaté retourné si la condition n'est pas
rempli. Si cet argument n'est pas présent. Le pattern est ignoré.

## .:Escape:: .:GetBlogMetadataIfNotNull::metadata_name[::string][::string2]:. ::EndEscape:.

Identique à __GetBlogMetadataIfExists__, mais la métadonnée spécifiée ne
doit pas être vide.

.:CodeHighlightInclude::html::False::GetBlogMetadataIfExists_example:.

Dans cet example, on suppose que l'image de l'icone du réseau social se
trouve à la racine du blog, on a donc besoin de préciser son chemin
relatif avec la variable contextuelle {relative_origin}.

Si la variable référencée n'est pas définit VenC ignore le motif et le
supprime.

Si le second argument n'est pas définit l'accesseur renvoie directement
la variable référencée, si elle existe.

## .:Escape:: .:ForBlogArchives::string::separator:. ::EndEscape:.

Ce motif permet de récuper la listes des périodes archivées. Le format
de la période de temps est définit dans le fichier de configuration
principal par le champ __archives&#95;directory&#95;name__.

- Le premier argument __string__ contient le texte à formater pour chaque
élément de la liste de période.
- Le second argument __separator__ contient le texte utilisé comme séparateur.

Les variables contextuelles de la fonction sont les suivantes:

- __{value}__ : La période courante, tel que définit par __archives&#95;directory&#95;name__
dans le fichier de configuration principal du blog.
- __{path}__ : Le chemin relatif la période archivée.
- __{count}__ : Le nombre de publication dans la période courante.
- __{weight}__ : Le nombre de publication dans la période courante divisé
par le nombre maximal de publication par période.

Si la génération des archives est désactivé, le motif est ignoré et supprimé.

## .:Escape:: .:LeavesForBlogCategories::string::separator:. ::EndEscape:. 

Les categories sont organisées sous la forme d'un arbre. Il est
possible de ne récupérer que les "feuilles" de cet arbres, c'est à dire
les catégories qui n'ont pas de sous categories.

Le motif fonctione comme __LeavesForEntryCategories__
mais construit l'arborescence des categories en compilant toutes les
catégories de toutes les publications.

Les arguments du motif sont les suivants:

- __string__ : La chaine de caractères à formater avec des variables
contextuelles.
- __separator__ : La chaine de caractère qui sert de séparateur.

LeavesForBlogCategories possède les variables contextuelles suivante:

- __{value}__ : Contient le nom de la catégorie courante.
- __{path}__ : Contient le chemin relatif de la catégorie courante.
- __{branch}__ : Contient la branche complète de la catégorie; de la
racine de l'arborescence,
 jusqu-à la categorie courante.

Par exemple imaginons que l'arborescence des categories du blog se
présente de la façon suivante

.:CodeHighlight::Text::False::
├─── Science 
│    ├─── Chemestry
│    └─── Physic
└─── Art
     ├─── Music
     └─── Painting
:.

alors

> .:Escape:: .:LeavesForEntryCategories::{value}::,:. ::EndEscape:.

retournera

> Chemestry,Physic,Music,Painting

Ce motif est ignoré et supprimé si la génération des catégories est
désactivé dans le fichier de configuration principal.

## .:Escape:: .:TreeForBlogCategories::open&#95;node::open&#95;branch::close&#95;branch::close&#95;node:. ::EndEscape:.

Les categories de la publication sont organisées sous la forme d'un arbre.
Il est possible de récupérer l'arbre entier afin, typiquement, de générer
un menu ou une liste de catégories et de sous catégories.

Le motif fonctione comme __TreeForEntryCategories__
mais construit l'arborescence des categories en compilant toutes les
catégories de toutes les publications.

Les arguments du motif sont

- __open&#95;node__ : Contient la chaine de caractère d'ouverture pour
la categorie parente.
- __open&#95;branch__ : Contient la chaine de caractère d'ouverture de
la categorie courante.
- __close&#95;branch__ : Contient la chaine de caractère de fermeture de
la categorie courante.
- __close&#95;node__ : Contient la chaine de caractère de fermeture de
la categorie parente.

Les variables contextuelles de ce motif sont les suivantes:

- __{value}__ : Le nom de la categorie courante.
- __{path}__ : Le chemin relatif de la categorie courante.
- __{count}__ : Le nombre de publication dans la categorie courante.
- __{weight}__ : Le nombre de publication dans la categorie courante divisé
par le nombre maximal de publication par categorie.

Par exemple, pour créer un menu déroulant, on utiliserait le motif comme
ci-dessous:

.:CodeHighlightInclude::html::False::TreeForBlogCategories_example:.

Si l'ensemble des categories du blog formait l'arborescence suivante:

.:CodeHighlight::Text::False::
├─── Material
│    └─── Metal
│          ├─── Copper
│          └─── Steel
└─── Science
:.

Alors le motif générerait quelque chose comme le code html suivant:

.:CodeHighlight::html::False::
<ul>
    <li>
        <a href="../Material/" title="1 publications">Material</a>
        <ul>
            <li>
                <a href="../Material/Metal/" title="1 publications">Metal</a>
                <ul>
                    <li><a href="../Material/Metal/Copper/" title="1 publications">Copper</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li>
        <a href="../Material-Metal/" title="1 publications">Material Metal</a>
        <ul>
            <li>
                <a href="../Material-Metal/Steel/" title="1 publications">Steel</a>
            </li>
        </ul>
    </li>
    <li>
        <a href="../Science/" title="1 publications">Science</a>
    </li>
</ul>
:.

À la fin de chaque branche, si la catégorie courante possède une ou
plusieurs catégorie filles, alors les arguments open&#95;node et
close&#95;node sont ajoutés et une nouvelle liste de sous catégories
est générée entre ces deux arguments, en utilisant les arguments
open&#95;branch et close&#95;branch.

Ce motif est ignoré et supprimé si la génération des catégories est
désactivée dans le fichier de configuration principal.

## .:Escape:: .:GetChapters::open_node::open&#95;branch::close&#95;branch::close&#95;node:. ::EndEscape:.

Ce motif permet de récupérer l'arborescence des chapitres du blog. En effet,
VenC permet d'organiser
votre contenu comme le serait un livre ou un e-book. La présente
documentation est d'ailleurs faite ainsi.

Le motif a les mêmes arguments que __TreeForEntryCategories__ et __TreeForBlogCategories__:

- open_node : Contient la chaine de caractère d'ouverture du chapitre parent.
- open_branch : Contient la chaine de caractère d'ouverture du chapitre courant.
- close_branch : Contient la chaine de caractère de fermeture du chapitre courant.
- close_node : Contient la chaine de caractère de fermeture du chapitre parent.

Les varariables contextuelles de la fonction sont les suivantes:

- __{index}__ : La valeur de la numérotation du chapitre courant.
Par exemple '3.2', '4.2.1' ou bien '2'.
- __{level}__ : Le niveau du chapitre courant. Par exemple un chapitre avec
 l'index '3.2' aurait le niveau 1. Un chapitre avec l'index '4.2.1' aurait
 le niveau 2 et un chapitre avec l'index '2' aurait le niveau 0.
- __{title}__ : Le titre du chapitre courant.
- __{path}__ : Le chemin relatif du chapitre courant.

Une utilisation typique du motif serait:

.:CodeHighlightInclude::html::False::Chapters_example:.

La fonction générerait alors par exemple le code html ci-dessous

.:CodeHighlight::html::False::
<ul class="chapter-level0">
    <li>
        1. <a href="../Premier-Chapitre">Premier Chapitre</a>
    </li>
    <li>
        2. <a href="../Second-Chapitre">Second Chapitre</a>
    </li>
    <li>
        3. <a href="../Troisième-Chapitre">Troisième Chapitre</a>
        <ul class="chapter-level1">
            <li>
                3. <a href="../Premier-Sous-Chapitre-du-Troisième Chapitre">Premier Sous-Chapitre du Troisième Chapitre</a>
            </li>
        </ul>
</ul>
:.

Si la génération des chapitres est désactivé dans le fichier de
configuration principal le motif est ignoré et supprimé.

## .:Escape:: .:GetThreadName[::string1][::string2]:. ::EndEscape:.

Ce motif permet de récupérer le nom du fil de publication courant.

Par exemple si la page courange est généré dans un fil de publication de
type _categorie_ et que ladite catégorie s'appel "Histoire de
l'informatique", alors __GetThreadName__ permet de récupérer cette valeur
dans une chaine de caractère formatée correspondant
à l'argument __string1__. Si, au contraire, le fil de publication n'a
pas de nom alors c'est __string2__ qui est renvoyé.

- __string1__ : Premier argument du motif, c'est celui qui est renvoyé si
le fil de publication a un nom. Pour accèder au nom du fil de publication
dans l'argument, il faut utiliser la variable contextuelle __{value}__.
Si c'est cette argument qui doit être utilisé par le motif et qu'il est
manquant, le motif renvoie simplement le nom du fil de publication, sans
formattage particuler.
- __string2__ : Second argument du motif, c'est celui qui est renvoyé si
le fil de publication n'a pas de nom. Cet argument n'a pas de variable
contextuelle. Si c'est cette argument qui doit être utilisé par le motif
et qu'il est manquant. Le motif est ignoré.

## .:Escape:: .:GetEntryAttributeByID::attribute::identifier:. ::EndEscape:.

Ce motif permet de récupérer n'importe quel métadonné d'une publication
en renseignant l'identifiant de celle-ci et le nom de la métadonnée désirée.

- __attribute__ : Le nom de la métadonnée de la publication.
- __identifier__ : Un nombre entier identifiant la publication ciblée.

Ce pattern est permet de récupérer, entre autre métadonnée définit dans
le header YAML de la publication, l'url de celle-ci. Par exemple :

> .:Escape:: .:GetEntryAttributeByID::url::1337:. ::EndEscape:.

Renverra le permalien relatif de la publication dont l'identifiant est 1337.

## .:Escape:: .:GetChapterAttributeByIndex::attribute::index:. ::EndEscape:.

Ce motif permet de récupérer n'importe quel métadonnée d'un chapitre en
renseignant son index.

- __attribute__ : Nom de la métadonnée du chapitre.
- __index__ : Index du chapitre dont ont veut récupérer la métadonnée.

Typiquement ce pattern sert à récupérer le titre
du chapitre, ou son chemin. Par exemple

> .:Escape:: .:GetChapterAttributeByIndex::path::1.2.3:. ::EndEscape:.

Renverra le permalien relatif du chapitre 1.2.3.

> .:Escape:: .:GetChapterAttributeByIndex::title::4.2:. ::EndEscape:.

Renverra le permalien relatif du chapitre 4.2
