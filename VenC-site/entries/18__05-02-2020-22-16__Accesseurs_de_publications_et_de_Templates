authors: 'Denis Salem'
categories: Material > Metal > Copper, Material Metal > Steel, Science
tags: ''
chapter: 5.1.1
title: Accesseur de publications
variable_name: pif, paf, pouf
---VENC-BEGIN-PREVIEW---
---VENC-END-PREVIEW---

Les accesseurs de publications ne sont disponible que pendant le
traitement d'une publication, donc à l'intérieur
des fichiers __entry.html__, __rssEntry.xml__ et __atomEntry.xml__ et de
la publication elle même.

Il est aussi possible d'utiliser ceux là dans des templates. Pour en savoir plus sur les templates, rendez vous [ici](.:GetRelativeOrigin:.Les-templates)

## .:Escape:: .:GetEntryID:. ::EndEscape:.
 Retourne l'identifiant unique de la publication.

## .:Escape:: .:GetEntryTitle:. ::EndEscape:.
Retourne le nom de la publication.

## .:Escape:: .:GetEntryMonth:. ::EndEscape:.
Retourne le mois de création de la publication.

## .:Escape:: .:GetEntryYear:. ::EndEscape:.
Retourne l'année de création de la publication.

## .:Escape:: .:GetEntryDay:. ::EndEscape:.
Retourne le jour de création de la publication.

## .:Escape:: . :GetEntryHour:. ::EndEscape:.
Retourne l'heure de création de la publication.

## .:Escape:: .:GetEntryMinute:. ::EndEscape:.
Retourne la minute de création de la publication.

## .:Escape:: .:GetEntryDate:. ::EndEscape:.

Retourne la date de la publication formaté comme définit dans le fichier de configuration par le champ date_format.

## .:Escape:: .:GetEntryDateURL:. ::EndEscape:.

Retourne le liens vers le groupe d'archive dans lequel se trouve la publication.

## .:Escape:: .:GetEntryURL:. ::EndEscape:.

Retourne l'URL de la publication si VenC est configuré pour générer une page par publication.
sinon, le motif est ignoré et supprimé.

## .:Escape:: .:ForEntryAuthors::string::separator:. ::EndEscape:.

Retourne la liste des auteurs de la publication.

Le premier argument est une chaine de
caractère à formater avec la variable contextuelle __{value}__ contenant le nom de l'auteur courant.

Le second paramètre est une chaine de caractère servant de séparateur.

## .:Escape:: .:ForEntryTags::string::separator:. ::EndEscape:.

Retourne la liste des mots clefs de la publication.

Le premier argument est une chaine de
caractère à formater avec la variable contextuelle __{value}__ contenant le mot clef courant.

Le second paramètre est une chaine de caractère servant de séparateur.

## .:Escape:: .:ForEntryMetadata::variable_name::string::separator:. ::EndEscape:.

Il est possible de définir des [métadonnées](.:GetRelativeOrigin:.Metadonnee) sous la forme de listes. 

Le premier argument est une chaine de caractère à formater avec la
variable contextuelle __{value}__ contenant l'élément courant de la liste.

Le second paramètre est une chaine de caractère servant de séparateur.

## .:Escape:: .:GetEntryMetadata::variable_name:. ::EndEscape:.

Il est possible de définir ses propres variable dans les métadonnées de la publication ou du template.

Par exemple, si on définie la variable suivante:

> free_hardware : Arduino Mega

Pour accéder à celle-ci on utilisera le motif GetEntryMetadata de la façon suivante:

> .:Escape:: .:GetEntryMetadata::free_hardware:. ::EndEscape:.

Si la variable ainsi référencée n'existe pas VenC générera une
erreur et vous indiquera où en est l'origine.

## .:Escape:: .:GetEntryMetadataIfExists::variable_name[::string]:. ::EndEscape:.

De façon similaire, il est possible d'essayer d'accéder à une variable,
sans garantie que celle-ci existe. Si la variable existe, il est possible
alors de formater du texte pour y inclure notre variable.

Il est possible d'utiliser des variables contextuelles propre à la fonction pour formater le texte:

- __{value}__ : La valeur de la variable qu'on référence.
- __{relative_origin}__ : Le chemin relatif de la racine du blog.

Un cas d'usage typique serait de modifier le style de la publications en attribuant une classe CSS à l'élément HTML:

.:CodeHighlightInclude::Text::False::GetEntryMetadataIfExists_example:.

Si la variable référencée n'est pas définit VenC ignore le motif et le supprime.

Si le second argument n'est pas définit l'accesseur renvoie directement la variable référencée, si elle existe.

## .:Escape:: .:LeavesForEntryCategories::string::separator:. ::EndEscape:. 

Les categories sont organisées sous la forme d'un arbre. Il est
possible de ne récupérer que les "feuilles" de cet arbres, c'est à dire
les catégories qui n'ont pas de sous categories.

Les arguments du motif sont les suivants:

- __string__ : La chaine de caractères à formater avec des variables contextuelles.
- __separator__ : La chaine de caractère qui sert de séparateur.

LeavesForEntryCategories possède les variables contextuelles suivante:

- __{value}__ : Contient le nom de la catégorie courante.
- __{path}__ : Contient le chemin relatif de la catégorie courante.
- __{branch}__ : Contient la branche complète de la catégorie; de la racine de l'arborescence,
 jusqu-à la categorie courante.

Par exemple si la publication courante se trouve dans les catégories suivantes:

.:CodeHighlight::Yaml::False::categories: 'moo, foo > bar, boo > loo > poo':.

le motif

> .:Escape:: .:LeavesForEntryCategories::{value}::,:. ::EndEscape:.

retournera

> moo,bar,poo

Ce motif est ignoré et supprimé si la génération des catégories est désactivé dans le fichier de configuration principal.

## .:Escape:: .:TreeForEntryCategories::open&#95;node::open&#95;branch::close&#95;branch::close&#95;node:. ::EndEscape:.

Les categories de la publication sont organisées sous la forme d'un arbre. Il est
possible de récupérer l'arbre entier afin, typiquement, de générer un menu ou une liste de catégories 
et de sous catégories.

Les arguments du motif sont les suivantes:

- __open&#95;node__ : Contient la chaine de caractère d'ouverture pour la categorie parente.
- __open&#95;branch__ : Contient la chaine de caractère d'ouverture de la categorie courante.
- __close&#95;branch__ : Contient la chaine de caractère de fermeture de la categorie courante.
- __close&#95;node__ : Contient la chaine de caractère de fermeture de la categorie parente.

Les variables contextuelles de ce motif sont les suivantes:

- __{value}__ : Le nom de la categorie courante.
- __{path}__ : Le chemin relatif de la categorie courante.
- __{count}__ : Le nombre de publication dans la categorie courante.
- __{weight}__ : Le nombre de publication dans la categorie courante divisé
par le nombre maximal de publication par categorie.

Par exemple, pour créer un menu déroulant, on utiliserait le motif comme ci-dessous:

.:CodeHighlightInclude::html::False::TreeForEntryCategories_example:.

Si la publication était incluse dans les catégories suivantes:

.:CodeHighlight::Yaml::False:: categories: 'Material > Metal > Copper, Material Metal > Steel, Science' :.

Alors le motif générerait quelque chose comme le code html suivant:

.:CodeHighlight::html::False::
<ul>
    <li>
        <a href="../Material/" title="1 publications">Material</a>
        <ul>
            <li>
                <a href="../Material/Metal/" title="1 publications">Metal</a>
                <ul>
                    <li><a href="../Material/Metal/Copper/" title="1 publications">Copper</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li>
        <a href="../Material-Metal/" title="1 publications">Material Metal</a>
        <ul>
            <li>
                <a href="../Material-Metal/Steel/" title="1 publications">Steel</a>
            </li>
        </ul>
    </li>
    <li>
        <a href="../Science/" title="1 publications">Science</a>
    </li>
</ul>
:.

À la fin de chaque branche, si la catégorie courante possède une ou plusieurs catégorie filles,
alors les arguments open&#95;node et close&#95;node sont ajoutés est une nouvelle liste de sous catégories
est générée entre ces deux arguments, en utilisant les arguments open&#95;branch et close&#95;branch.

Ce motif est ignoré et supprimé si la génération des catégories est désactivé dans le fichier de configuration principal.
