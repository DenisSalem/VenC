authors:
- Denis Salem
categories:
- Material > Metal > Copper
- Material Metal > Steel
- Science
chapter: 5.2.1
tags:
- ''
title: Accesseur de publications
variable_name: pif, paf, pouf
---VENC-BEGIN-PREVIEW---
---VENC-END-PREVIEW---

Les accesseurs de publications ne sont disponibles que pendant le
traitement d'une publication, donc à l'intérieur
des fichiers __entry.html__, __rssEntry.xml__ et __atomEntry.xml__ et de
la publication elle-même.

Il est aussi possible d'utiliser ceux-là dans des templates. Pour en savoir plus sur les templates, rendez vous [ici](.:GetRelativeOrigin:.Les-templates)

## .:Escape:: .:GetEntryContent:. :.

Ce pattern ne peut être utilisé que dans le fichier de thème __entry.html__.

Ce pattern renvoie le contenu complet de la publication courante.

## .:Escape:: .:GetEntryPreview:. :.

Ce pattern ne peut être utilisé que dans le fichier de thème __entry.html__.

Ce pattern renvoie le résumé de la publication courante.

## .:Escape:: .:GetEntryID:. :.

Retourne l'identifiant unique de la publication.

## .:Escape:: .:GetEntryTitle:. ::EndEscape:.

Retourne le nom de la publication.

## .:Escape:: .:GetEntryMonth:. ::EndEscape:.
Retourne le mois de création de la publication.

## .:Escape:: .:GetEntryYear:. ::EndEscape:.
Retourne l'année de création de la publication.

## .:Escape:: .:GetEntryDay:. ::EndEscape:.

Retourne le jour de création de la publication.

## .:Escape:: .:GetEntryHour:. ::EndEscape:.
Retourne l'heure de création de la publication.

## .:Escape:: .:GetEntryMinute:. ::EndEscape:.

Retourne la minute de création de la publication.

## .&colon;GetEntryDate[::format]&colon;.

Retourne la date de la publication formatée comme définit dans le fichier de configuration par le champ date_format.

Il est possible d'utiliser un autre format de date à l'aide de l'argument
optionnel __format__. Pour en savoir plus sur ce format, rendez vous [ici](http://strftime.org).

## .:Escape:: .:GetEntryDateURL:. ::EndEscape:.

Retourne le liens vers le groupe d'archive dans lequel se trouve la publication.

## .:Escape:: .:GetEntryURL:. ::EndEscape:.

Retourne l'URL de la publication si VenC est configuré pour générer une page par publication.
Sinon, le motif est ignoré et supprimé.

## .:Escape:: .:ForEntryAuthors::string::separator:. ::EndEscape:.

Retourne la liste des auteurs de la publication.

Le premier argument est une chaîne de
caractères à formater avec la variable contextuelle __{value}__ contenant le nom de l'auteur courant.

Le second paramètre est une chaîne de caractères servant de séparateur.

## .:Escape:: .:ForEntryTags::string::separator:. ::EndEscape:.

Retourne la liste des mots-clefs de la publication.

Le premier argument est une chaîne de
caractères à formater avec la variable contextuelle __{value}__ contenant le mot-clef courant.

Le second paramètre est une chaîne de caractères servant de séparateur.

## .:Escape:: .:ForEntryMetadata::variable_name::string::separator:. ::EndEscape:.

Il est possible de définir des [métadonnées](.:GetRelativeOrigin:.Metadonnee) sous la forme de listes. 

Le premier argument est une chaîne de caractères à formater avec la
variable contextuelle __{value}__ contenant l'élément courant de la liste.

Le second paramètre est une chaîne de caractères servant de séparateur.

## .:Escape:: .:ForEntryMetadataIfExists::variable_name::string::separator:. ::EndEscape:.

Identique à __ForEntryMetadata__ mais n'arrête pas VenC si la métadonné identifiée par variable_name n'existe pas.

## .:Escape:: .:GetEntryMetadata::metadata_name:. ::EndEscape:.

Il est possible de définir ses propres champs dans les métadonnées de la publication ou du template.

Par exemple, si on définie le champ suivant :

> free_hardware : Arduino Mega

Pour accéder à celui-ci, on utilisera le motif GetEntryMetadata de la façon suivante :

> .:Escape:: .:GetEntryMetadata::free_hardware:. ::EndEscape:.

Si la métadonnée ainsi référencée n'existe pas, VenC générera une
erreur et vous indiquera où en est l'origine.

## .:Escape:: .:GetEntryMetadataIfExists::metadata_name[::string][::string2]:. ::EndEscape:.

De façon similaire, il est possible d'essayer d'accéder à une métadonnée,
sans garantie que celle-ci existe. Si la métadonnée existe, il est possible
alors de formater du texte pour l'y inclure.

.:CodeHighlightInclude::html::False::GetEntryMetadataIfExists_example:.


Il est possible d'utiliser des variables contextuelles propre à la fonction pour formater le texte :

- __{value}__ : la valeur de la métadonnée qu'on référence.

Les arguments de ce pattern sont au nombre de trois :

- __metadata&#95;name__ : le nom de la métadonnée désirée.
- __string__ : le texte formaté retourné si la condition est remplie. Optionnel. Si cet
argument n'est pas présent, la fonction renvoie la valeur de la métadonnée sans formatage.
- __string2__ : le texte non formaté retourné si la condition n'est pas
rempli. Si cet argument n'est pas présent, le pattern est ignoré.

## .:Escape:: .:GetEntryMetadataIfNotNull::metadata_name[::string][::string2]:. ::EndEscape:.

Identique à __GetEntryMetadataIfExists__, mais la métadonnée spécifié ne doit pas être vide.

.:CodeHighlightInclude::html::False::GetEntryMetadataIfNotNull_example:.

Si la variable référencée n'est pas définie, VenC ignore le motif et le supprime.

Si le second argument n'est pas définie, l'accesseur renvoie directement la variable référencée, si elle existe.

## .:Escape:: .:LeavesForEntryCategories::string::separator:. ::EndEscape:. 

Les catégories sont organisées sous la forme d'un arbre. Il est
possible de ne récupérer que les "feuilles" de cet arbres, c'est-à-dire
les catégories qui n'ont pas de sous-catégories.

Les arguments du motif sont les suivants :

- __string__ : la chaîne de caractèress à formater avec des variables contextuelles.
- __separator__ : la chaîne de caractères qui sert de séparateur.

LeavesForEntryCategories possède les variables contextuelles suivante :

- __{value}__ : contient le nom de la catégorie courante.
- __{path}__ : contient le chemin relatif de la catégorie courante.
- __{branch}__ : contient la branche complète de la catégorie, de la racine de l'arborescence
 jusqu'à la catégorie courante.

Par exemple, si la publication courante se trouve dans les catégories suivantes :

.:CodeHighlight::Yaml::False::categories: 'moo, foo > bar, boo > loo > poo':.

Alors le motif :

> .:Escape:: .:LeavesForEntryCategories::{value}::,:. ::EndEscape:.

Retournera :

> moo,bar,poo

Ce motif est ignoré et supprimé si la génération des catégories est désactivée dans le fichier de configuration principal.

## .:Escape:: .:TreeForEntryCategories::open&#95;node::open&#95;branch::close&#95;branch::close&#95;node:. ::EndEscape:.

Les catégories de la publication sont organisées sous la forme d'un arbre. Il est
possible de récupérer l'arbre entier afin, typiquement, de générer un menu ou une liste de catégories 
et de sous-catégories.

Les arguments du motif sont les suivantes :

- __open&#95;node__ : contient la chaîne de caractères d'ouverture pour la catégorie parente.
- __open&#95;branch__ : contient la chaîne de caractères d'ouverture de la catégorie courante.
- __close&#95;branch__ : contient la chaîne de caractères de fermeture de la catégorie courante.
- __close&#95;node__ : contient la chaîne de caractères de fermeture de la catégorie parente.

Les variables contextuelles de ce motif sont les suivantes :

- __{value}__ : le nom de la catégorie courante.
- __{path}__ : le chemin relatif de la catégorie courante.
- __{count}__ : le nombre de publications dans la catégorie courante.
- __{weight}__ : le nombre de publication dans la catégorie courante divisé par le total des publications.
- __{childs}__ : contient la récursion suivante dans le traitement de l'arbre de donnée.

Par exemple, pour créer un menu déroulant on peut utiliser le motif comme ci-dessous :

.:CodeHighlightInclude::html::False::TreeForEntryCategories_example:.

Si la publication était incluse dans les catégories suivantes :

.:CodeHighlight::Yaml::False:: categories: 'Material > Metal > Copper, Material Metal > Steel, Science' :.

Alors le motif générerait quelque chose comme le code HTML suivant :

.:CodeHighlight::html::False::
<ul>
    <li>
        <a href="../Material/" title="1 publications">Material</a>
        <ul>
            <li>
                <a href="../Material/Metal/" title="1 publications">Metal</a>
                <ul>
                    <li><a href="../Material/Metal/Copper/" title="1 publications">Copper</a></li>
                </ul>
            </li>
        </ul>
    </li>
    <li>
        <a href="../Material-Metal/" title="1 publications">Material Metal</a>
        <ul>
            <li>
                <a href="../Material-Metal/Steel/" title="1 publications">Steel</a>
            </li>
        </ul>
    </li>
    <li>
        <a href="../Science/" title="1 publications">Science</a>
    </li>
</ul>
:.

À la fin de chaque branche, si la catégorie courante possède une ou plusieurs catégorie filles,
alors les arguments open&#95;node et close&#95;node sont ajoutés et une nouvelle liste de sous-catégories
est générée entre ces deux arguments, en utilisant les arguments open&#95;branch et close&#95;branch.

Ce motif est ignoré et supprimé si la génération des catégories est désactivé dans le fichier de configuration principal.
