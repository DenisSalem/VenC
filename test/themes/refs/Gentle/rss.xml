<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
  <atom:link href="http://127.0.0.1:8888/feed.xml" rel="self" type="application/rss+xml" />
  <title>Theme Unit Test</title>
  <link>http://127.0.0.1:8888</link>
  <description>Test blog output</description>
  
  <item>
    <title>Display title in entry test</title>
    <link>http://127.0.0.1:8888/entry6.html</link>
    <guid isPermaLink="true">http://127.0.0.1:8888/entry6.html</guid>
    <description>
    	<![CDATA[
	<p>With Tessellation you can tell VenC if it must display entry title or not.</p>

<p>By default, entry title are disabled.</p>

<p>On the user side, to display the entry title in the entry, one have to set up the above metadata "<strong>display_title_in_entry</strong>".</p>

<p>By looking the source of the Tessellation theme, in <em>entry.html</em> you'll see that we are calling the following patterns to achieve the trick.</p>

<p></p>

<pre>.:GetEntryMetadataIfExists::display_title_in_entry::&lt;h1&gt;Display title in entry test&lt;/h1&gt;:.</pre>

<p></p>

	]]>
    </description>
  </item>
  <item>
    <title>Display title in thread test</title>
    <link>http://127.0.0.1:8888/entry5.html</link>
    <guid isPermaLink="true">http://127.0.0.1:8888/entry5.html</guid>
    <description>
    	<![CDATA[
	<p>With Tessellation you can tell VenC if it must display entry title or not.</p>

<p>By default, entry title are disabled.</p>

<p>On the user side, to display the entry title in blog thread, one have to set up the above metadata "<strong>display_title_in_threads</strong>".</p>

<p>By looking the source of the Tessellation theme, in <em>entry.html</em> you'll see that we are calling the following patterns to achieve the trick.</p>

<p></p>

<pre>.:GetEntryMetadataIfExists::display_title_in_threads::&lt;h1&gt;.:GetEntryTitle:.&lt;/h1&gt;:.</pre>

<p></p>

	]]>
    </description>
  </item>
  <item>
    <title>Escape unit test</title>
    <link>http://127.0.0.1:8888/entry4.html</link>
    <guid isPermaLink="true">http://127.0.0.1:8888/entry4.html</guid>
    <description>
    	<![CDATA[
	<p><em>As shown below Escape will disable parsing of VenC patterns between Escape/EndEscape pair.
In the other hand, the behavior of DisableMarkup is pretty straightforward.</em></p>

<p><strong>With Escape/EndEscape and DisableMarkup</strong></p>

- Hello VenC!
- Hello lovely user!

_Italic text for fun and non profit!_

<p> .:SetColor::This is red text!t::red:. </p>

<p><strong>Without Escape/EndEscape and DisableMarkup</strong></p>

<ul>
<li>Hello VenC!</li>
<li>Hello lovely user!</li>
</ul>

<p><em>Italic text for fun and non profit!</em></p>

<p><span style="color: red;">This is red text!</span></p>

<p>Please note that VenC syntax require you to close Escape pattern with ':&colon;EndEscape&colon;.' .</p>

	]]>
    </description>
  </item>
  <item>
    <title>Latex2MathML unit test</title>
    <link>http://127.0.0.1:8888/entry3.html</link>
    <guid isPermaLink="true">http://127.0.0.1:8888/entry3.html</guid>
    <description>
    	<![CDATA[
	<p>Example of Latex2MathML usage for rendering complex number expression:</p>

<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover><mrow><msub><mi>z</mi><mn>1</mn></msub></mrow><mo stretchy="true">&#x000AF;</mo></mover><mi>.</mi><mover><mrow><msub><mi>z</mi><mn>2</mn></msub></mrow><mo stretchy="true">&#x000AF;</mo></mover><mo>&#x0003D;</mo><mover><mrow><msub><mi>z</mi><mn>1</mn></msub><mi>.</mi><msub><mi>z</mi><mn>2</mn></msub></mrow><mo stretchy="true">&#x000AF;</mo></mover></mrow></math>

<p>Another example combining Latex2MathML and Table for rendering lined up equation:</p>

<div class="__VENC_TABLE__"><table><tr><td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover><mrow><msub><mi>z</mi><mn>1</mn></msub></mrow><mo stretchy="true">&#x000AF;</mo></mover><mi>.</mi><mover><mrow><msub><mi>z</mi><mn>2</mn></msub></mrow><mo stretchy="true">&#x000AF;</mo></mover></mrow></math></td><td>=</td><td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mover><mrow><mo stretchy="false">&#x00028;</mo><mi>a</mi><mo>&#x0002B;</mo><mi>i</mi><mi>b</mi><mo stretchy="false">&#x00029;</mo></mrow><mo stretchy="true">&#x000AF;</mo></mover><mover><mrow><mo stretchy="false">&#x00028;</mo><mi>c</mi><mo>&#x0002B;</mo><mi>i</mi><mi>d</mi><mo stretchy="false">&#x00029;</mo></mrow><mo stretchy="true">&#x000AF;</mo></mover></mrow></math></td></tr><tr><td></td><td>=</td><td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo stretchy="false">&#x00028;</mo><mi>a</mi><mo>&#x02212;</mo><mi>i</mi><mi>b</mi><mo stretchy="false">&#x00029;</mo><mo stretchy="false">&#x00028;</mo><mi>c</mi><mo>&#x02212;</mo><mi>i</mi><mi>d</mi><mo stretchy="false">&#x00029;</mo></mrow></math></td></tr><tr><td></td><td>=</td><td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>a</mi><mi>c</mi><mo>&#x02212;</mo><mi>i</mi><mi>a</mi><mi>d</mi><mo>&#x02212;</mo><mi>i</mi><mi>b</mi><mi>c</mi><mo>&#x02212;</mo><mi>b</mi><mi>d</mi></mrow></math></td></tr><tr><td></td><td>=</td><td><math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo stretchy="false">&#x00028;</mo><mi>a</mi><mi>c</mi><mo>&#x02212;</mo><mi>b</mi><mi>d</mi><mo stretchy="false">&#x00029;</mo><mo>&#x02212;</mo><mi>i</mi><mo stretchy="false">&#x00028;</mo><mi>a</mi><mi>d</mi><mo>&#x0002B;</mo><mi>b</mi><mi>c</mi><mo stretchy="false">&#x00029;</mo></mrow></math></td></tr></table></div>

	]]>
    </description>
  </item>
  <item>
    <title>CodeHighlight unit test</title>
    <link>http://127.0.0.1:8888/entry2.html</link>
    <guid isPermaLink="true">http://127.0.0.1:8888/entry2.html</guid>
    <description>
    	<![CDATA[
	<p>Example of C++ syntax coloration with line number:</p>

<div class="__VENC_PYGMENTIZE_WRAPPER__"><table class="venc_source_CPlusPlustable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="venc_source_CPlusPlus"><pre><span></span><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;:</span><span class="cp"></span>

<span class="k">class</span> <span class="nc">Example</span> <span class="p">{</span>
	<span class="k">public</span><span class="o">:</span>
		<span class="k">static</span> <span class="kt">void</span> <span class="n">do_something</span><span class="p">();</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="n">Example</span><span class="o">::</span><span class="n">do_something</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Well, not really&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">Example</span><span class="o">::</span><span class="n">do_something</span><span class="p">();</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></div>

<p>Another example of Python syntax coloration without line number:</p>

<div class="__VENC_PYGMENTIZE_WRAPPER__"><div class="venc_source_Python"><pre><span></span><span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">argv</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">PatternMissingArguments</span><span class="p">(</span><span class="n">expected</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">got</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">argv</span><span class="p">))</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="n">something</span><span class="p">)</span> <span class="k">for</span> <span class="n">something</span> <span class="ow">in</span> <span class="n">iterable</span><span class="p">])</span>
        
    <span class="k">except</span> <span class="ne">IndexError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">e</span><span class="o">.</span><span class="n">args</span> <span class="o">==</span> <span class="p">(</span><span class="s1">&#39;tuple index out of range&#39;</span><span class="p">,):</span>
            <span class="k">raise</span> <span class="n">PatternInvalidArgument</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
                
        <span class="k">raise</span> <span class="n">e</span>
</pre></div>
</div>

	]]>
    </description>
  </item>
</channel>
</rss>
